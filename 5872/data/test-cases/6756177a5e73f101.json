{"uid":"6756177a5e73f101","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://rpc.ankr.com/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"516fb730c8759321b4247b2023dc8930","time":{"start":1733389536541,"stop":1733389536911,"duration":370},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f020af85b70>\ndata = {'name': 'Ethereum', 'url': 'https://rpc.ankr.com/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f020ae10190>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f020ae13190>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1109-94"},{"name":"thread","value":"2148-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e192f0e4b54337d1","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': 429, 'details': 'You have surpassed your allowed throughput limit. Reduce the amount of requests per second or upgrade for more capacity.', 'event': -33200, 'message': 'Too Many Requests'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1733389531150,"stop":1733389531526,"duration":376}},{"uid":"5844543d4b753598","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733389525532,"stop":1733389526059,"duration":527}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":10,"skipped":0,"passed":84,"unknown":0,"total":102},"items":[{"uid":"3981ca3afa34e012","reportUrl":"https://novasamatech.github.io/test-runner/5871//#testresult/3981ca3afa34e012","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733324700148,"stop":1733324700411,"duration":263}},{"uid":"4638c2fd0aa12964","reportUrl":"https://novasamatech.github.io/test-runner/5870//#testresult/4638c2fd0aa12964","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, request rate limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1733303133738,"stop":1733303134093,"duration":355}},{"uid":"f8f26f37628cbe70","reportUrl":"https://novasamatech.github.io/test-runner/5869//#testresult/f8f26f37628cbe70","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733238301457,"stop":1733238301584,"duration":127}},{"uid":"5a83ed64bae97aa","reportUrl":"https://novasamatech.github.io/test-runner/5868//#testresult/5a83ed64bae97aa","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733216717406,"stop":1733216717451,"duration":45}},{"uid":"800bdfbbae5a38d5","reportUrl":"https://novasamatech.github.io/test-runner/5867//#testresult/800bdfbbae5a38d5","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, fully limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1733151919406,"stop":1733151919447,"duration":41}},{"uid":"4cb0221777d9775f","reportUrl":"https://novasamatech.github.io/test-runner/5866//#testresult/4cb0221777d9775f","status":"passed","time":{"start":1733130326952,"stop":1733130327324,"duration":372}},{"uid":"9283c270536bb597","reportUrl":"https://novasamatech.github.io/test-runner/5865//#testresult/9283c270536bb597","status":"passed","time":{"start":1733065458988,"stop":1733065459974,"duration":986}},{"uid":"89117af6afbed453","reportUrl":"https://novasamatech.github.io/test-runner/5864//#testresult/89117af6afbed453","status":"passed","time":{"start":1733043869483,"stop":1733043870221,"duration":738}},{"uid":"f07042b3d4b949bc","reportUrl":"https://novasamatech.github.io/test-runner/5863//#testresult/f07042b3d4b949bc","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1732979068011,"stop":1732979068130,"duration":119}},{"uid":"32888d849092867d","reportUrl":"https://novasamatech.github.io/test-runner/5862//#testresult/32888d849092867d","status":"passed","time":{"start":1732957475090,"stop":1732957475697,"duration":607}},{"uid":"b92329a1632a5785","reportUrl":"https://novasamatech.github.io/test-runner/5861//#testresult/b92329a1632a5785","status":"passed","time":{"start":1732892689627,"stop":1732892690489,"duration":862}},{"uid":"fce54ade036fd029","reportUrl":"https://novasamatech.github.io/test-runner/5860//#testresult/fce54ade036fd029","status":"passed","time":{"start":1732871107836,"stop":1732871108174,"duration":338}},{"uid":"a49c47a8bdda590b","reportUrl":"https://novasamatech.github.io/test-runner/5859//#testresult/a49c47a8bdda590b","status":"passed","time":{"start":1732806279048,"stop":1732806279304,"duration":256}},{"uid":"fd7ab2583d18853d","reportUrl":"https://novasamatech.github.io/test-runner/5858//#testresult/fd7ab2583d18853d","status":"passed","time":{"start":1732784714535,"stop":1732784715340,"duration":805}},{"uid":"ee70293a17279022","reportUrl":"https://novasamatech.github.io/test-runner/5857//#testresult/ee70293a17279022","status":"passed","time":{"start":1732719881422,"stop":1732719881960,"duration":538}},{"uid":"8183388ec8aff93f","reportUrl":"https://novasamatech.github.io/test-runner/5856//#testresult/8183388ec8aff93f","status":"passed","time":{"start":1732698315916,"stop":1732698316813,"duration":897}},{"uid":"bbfeaac65e128120","reportUrl":"https://novasamatech.github.io/test-runner/5855//#testresult/bbfeaac65e128120","status":"passed","time":{"start":1732633483446,"stop":1732633483692,"duration":246}},{"uid":"ad97eef48f45b7d7","reportUrl":"https://novasamatech.github.io/test-runner/5854//#testresult/ad97eef48f45b7d7","status":"passed","time":{"start":1732611915487,"stop":1732611916065,"duration":578}},{"uid":"37ff37163af3f842","reportUrl":"https://novasamatech.github.io/test-runner/5853//#testresult/37ff37163af3f842","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1732547122849,"stop":1732547123314,"duration":465}},{"uid":"b9a0c8ebc3947d64","reportUrl":"https://novasamatech.github.io/test-runner/5852//#testresult/b9a0c8ebc3947d64","status":"passed","time":{"start":1732525518572,"stop":1732525518929,"duration":357}}]},"tags":[]},"source":"6756177a5e73f101.json","parameterValues":["{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"]}