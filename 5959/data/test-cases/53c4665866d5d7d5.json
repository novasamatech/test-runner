{"uid":"53c4665866d5d7d5","name":"test_rpc_node_is_synced[Test for Westend (TESTNET), url: wss://westend.public.curie.radiumblock.co/ws]","fullName":"tests.test_substrate_node_is_synced#test_rpc_node_is_synced","historyId":"84c88fcc2a11376bb5f1f64dac786afa","time":{"start":1736954526587,"stop":1736954586737,"duration":60150},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Wed, 15 Jan 2025 15:23:06 GMT', 'content-type': 'text/plain; charset=UTF-8', 'content-length': '15', 'connection': 'keep-alive', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=QlVzq%2BCWWILyHKB4LZWanfO3A0Wf34V3wTq5VCuqmt1bm5qpTu%2BauyqHb6nTJfvBvroVmfqLWYpruuIvkSHseNM8Rd96slTua2Y9ykm1kU1RK7jYdA91tNT2OlYJUP6WR8V8sCWmE7b0Dbb0fga0g%2BPjR432\"}],\"group\":\"cf-nel\",\"max_age\":604800}', 'nel': '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', 'x-frame-options': 'SAMEORIGIN', 'referrer-policy': 'same-origin', 'cache-control': 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0', 'expires': 'Thu, 01 Jan 1970 00:00:01 GMT', 'server': 'cloudflare', 'cf-ray': '9026dbff6b5be98e-ORD', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2920&min_rtt=2783&rtt_var=872&sent=6&recv=7&lost=0&retrans=0&sent_bytes=2559&recv_bytes=852&delivery_rate=1026230&cwnd=252&unsent_bytes=0&cid=6518340ea3faeaec&ts=60121&x=0\"'} -+-+- b'error code: 504'","statusTrace":"self = <substrateinterface.base.SubstrateInterface object at 0x7fc8dc2c62a0>\nmethod = 'system_syncState', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n>               self.websocket.send(json.dumps(payload))\n\n.venv/lib/python3.12/site-packages/substrateinterface/base.py:266: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7fc8dc3c2c30>\npayload = '{\"jsonrpc\": \"2.0\", \"method\": \"system_syncState\", \"params\": [], \"id\": 11}'\nopcode = 1\n\n    def send(self, payload: Union[bytes, str], opcode: int = ABNF.OPCODE_TEXT) -> int:\n        \"\"\"\n        Send the data as string.\n    \n        Parameters\n        ----------\n        payload: str\n            Payload must be utf-8 string or unicode,\n            If the opcode is OPCODE_TEXT.\n            Otherwise, it must be string(byte array).\n        opcode: int\n            Operation code (opcode) to send.\n        \"\"\"\n    \n        frame = ABNF.create_frame(payload, opcode)\n>       return self.send_frame(frame)\n\n.venv/lib/python3.12/site-packages/websocket/_core.py:297: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7fc8dc3c2c30>\nframe = <websocket._abnf.ABNF object at 0x7fc8dc662ba0>\n\n    def send_frame(self, frame) -> int:\n        \"\"\"\n        Send the data frame.\n    \n        >>> ws = create_connection(\"ws://echo.websocket.events\")\n        >>> frame = ABNF.create_frame(\"Hello\", ABNF.OPCODE_TEXT)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"My name is \", ABNF.OPCODE_CONT, 0)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"Foo Bar\", ABNF.OPCODE_CONT, 1)\n        >>> ws.send_frame(frame)\n    \n        Parameters\n        ----------\n        frame: ABNF frame\n            frame data created by ABNF.create_frame\n        \"\"\"\n        if self.get_mask_key:\n            frame.get_mask_key = self.get_mask_key\n        data = frame.format()\n        length = len(data)\n        if isEnabledForTrace():\n            trace(f\"++Sent raw: {repr(data)}\")\n            trace(f\"++Sent decoded: {frame.__str__()}\")\n        with self.lock:\n            while data:\n>               l = self._send(data)\n\n.venv/lib/python3.12/site-packages/websocket/_core.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7fc8dc3c2c30>\ndata = b'\\x81\\xc8\\x0fx\\x87\\xbetZ\\xed\\xcd`\\x16\\xf5\\xcelZ\\xbd\\x9e-J\\xa9\\x8e-T\\xa7\\x9cb\\x1d\\xf3\\xd6`\\x1c\\xa5\\x84/Z\\xf4\\xc7|\\x0c\\xe2\\xd3P\\x0b\\xfe\\xd0l+\\xf3\\xdf{\\x1d\\xa5\\x92/Z\\xf7\\xdf}\\x19\\xea\\xcd-B\\xa7\\xe5RT\\xa7\\x9cf\\x1c\\xa5\\x84/I\\xb6\\xc3'\n\n    def _send(self, data: Union[str, bytes]):\n>       return send(self.sock, data)\n\n.venv/lib/python3.12/site-packages/websocket/_core.py:559: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = None\ndata = b'\\x81\\xc8\\x0fx\\x87\\xbetZ\\xed\\xcd`\\x16\\xf5\\xcelZ\\xbd\\x9e-J\\xa9\\x8e-T\\xa7\\x9cb\\x1d\\xf3\\xd6`\\x1c\\xa5\\x84/Z\\xf4\\xc7|\\x0c\\xe2\\xd3P\\x0b\\xfe\\xd0l+\\xf3\\xdf{\\x1d\\xa5\\x92/Z\\xf7\\xdf}\\x19\\xea\\xcd-B\\xa7\\xe5RT\\xa7\\x9cf\\x1c\\xa5\\x84/I\\xb6\\xc3'\n\n    def send(sock: socket.socket, data: Union[bytes, str]) -> int:\n        if isinstance(data, str):\n            data = data.encode(\"utf-8\")\n    \n        if not sock:\n>           raise WebSocketConnectionClosedException(\"socket is already closed.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: socket is already closed.\n\n.venv/lib/python3.12/site-packages/websocket/_socket.py:149: WebSocketConnectionClosedException\n\nDuring handling of the above exception, another exception occurred:\n\nconnection_by_url = <substrateinterface.base.SubstrateInterface object at 0x7fc8dc2c62a0>\n\n    def test_rpc_node_is_synced(connection_by_url: SubstrateInterface):\n        try:\n>           sync_state = connection_by_url.rpc_request(\n                method='system_syncState',\n                params=[],\n            ).get(\"result\")\n\ntests/test_substrate_node_is_synced.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/substrateinterface/base.py:271: in rpc_request\n    self.connect_websocket()\n.venv/lib/python3.12/site-packages/substrateinterface/base.py:177: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.12/site-packages/websocket/_core.py:646: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.12/site-packages/websocket/_core.py:261: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.12/site-packages/websocket/_handshake.py:65: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=2, type=1, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.TEMPORARY_REDIRECT: 307>, <HTTPStatus.PERMANENT_REDIRECT: 308>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get(\"content-length\")\n            if content_len:\n                response_body = sock.recv(\n                    int(content_len)\n                )  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\n                f\"Handshake status {status} {status_message} -+-+- {resp_headers} -+-+- {response_body}\",\n                status,\n                status_message,\n                resp_headers,\n                response_body,\n            )\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Wed, 15 Jan 2025 15:23:06 GMT', 'content-type': 'text/plain; charset=UTF-8', 'content-length': '15', 'connection': 'keep-alive', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=QlVzq%2BCWWILyHKB4LZWanfO3A0Wf34V3wTq5VCuqmt1bm5qpTu%2BauyqHb6nTJfvBvroVmfqLWYpruuIvkSHseNM8Rd96slTua2Y9ykm1kU1RK7jYdA91tNT2OlYJUP6WR8V8sCWmE7b0Dbb0fga0g%2BPjR432\"}],\"group\":\"cf-nel\",\"max_age\":604800}', 'nel': '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', 'x-frame-options': 'SAMEORIGIN', 'referrer-policy': 'same-origin', 'cache-control': 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0', 'expires': 'Thu, 01 Jan 1970 00:00:01 GMT', 'server': 'cloudflare', 'cf-ray': '9026dbff6b5be98e-ORD', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2920&min_rtt=2783&rtt_var=872&sent=6&recv=7&lost=0&retrans=0&sent_bytes=2559&recv_bytes=852&delivery_rate=1026230&cwnd=252&unsent_bytes=0&cid=6518340ea3faeaec&ts=60121&x=0\"'} -+-+- b'error code: 504'\n\n.venv/lib/python3.12/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"connection_by_url","time":{"start":1736953595166,"stop":1736953603308,"duration":8142},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_substrate_node_is_synced"},{"name":"host","value":"fv-az1326-617"},{"name":"thread","value":"5191-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_substrate_node_is_synced"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"connection_by_url","value":"{'url': 'wss://westend.public.curie.radiumblock.co/ws', 'name': 'Westend (TESTNET)'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"bc4b3e53325dae52","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 521 None -+-+- {'date': 'Wed, 15 Jan 2025 15:22:01 GMT', 'content-type': 'text/plain; charset=UTF-8', 'content-length': '15', 'connection': 'keep-alive', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Wk1chSiA2apjk7BfsTQVPSV0zFRKhjNuE3EYgKVnto4NamSKmANZItI2Qucc9R5dccwv8QcdMoIDiSyJTlmPrchUKKqdkj5zFwUS2Ya%2FxMfWTzJIBYINqOUPdSo6G%2FqIYyGd%2Bz8EEtlCp5z4chmZVdXWpq6z\"}],\"group\":\"cf-nel\",\"max_age\":604800}', 'nel': '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', 'x-frame-options': 'SAMEORIGIN', 'referrer-policy': 'same-origin', 'cache-control': 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0', 'expires': 'Thu, 01 Jan 1970 00:00:01 GMT', 'server': 'cloudflare', 'cf-ray': '9026dbde3bb760ab-ORD', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2227&min_rtt=2204&rtt_var=644&sent=5&recv=6&lost=0&retrans=0&sent_bytes=2560&recv_bytes=852&delivery_rate=1247706&cwnd=252&unsent_bytes=0&cid=9ec247ebb39205fd&ts=206&x=0\"'} -+-+- b'error code: 521'","time":{"start":1736954521272,"stop":1736954521516,"duration":244}},{"uid":"17c1738d1db368af","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1736953603309,"stop":1736954516169,"duration":912860}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":13,"unknown":0,"total":14},"items":[{"uid":"eb95d99caa46fb13","reportUrl":"https://novasamatech.github.io/test-runner/5958//#testresult/eb95d99caa46fb13","status":"passed","time":{"start":1736932007357,"stop":1736932007369,"duration":12}},{"uid":"54eebc65cbd16453","reportUrl":"https://novasamatech.github.io/test-runner/5957//#testresult/54eebc65cbd16453","status":"passed","time":{"start":1736867173398,"stop":1736867173722,"duration":324}},{"uid":"b068fb8ee8067d99","reportUrl":"https://novasamatech.github.io/test-runner/5956//#testresult/b068fb8ee8067d99","status":"passed","time":{"start":1736845590799,"stop":1736845591145,"duration":346}},{"uid":"aebc211fc913e1df","reportUrl":"https://novasamatech.github.io/test-runner/5955//#testresult/aebc211fc913e1df","status":"passed","time":{"start":1736780800525,"stop":1736780800817,"duration":292}},{"uid":"cd844691906d8282","reportUrl":"https://novasamatech.github.io/test-runner/5953//#testresult/cd844691906d8282","status":"passed","time":{"start":1736694385126,"stop":1736694385396,"duration":270}},{"uid":"a5c35f7bdfd4af61","reportUrl":"https://novasamatech.github.io/test-runner/5952//#testresult/a5c35f7bdfd4af61","status":"passed","time":{"start":1736672770648,"stop":1736672770914,"duration":266}},{"uid":"8632d22c5f8b7437","reportUrl":"https://novasamatech.github.io/test-runner/5951//#testresult/8632d22c5f8b7437","status":"passed","time":{"start":1736607989613,"stop":1736607989887,"duration":274}},{"uid":"5f3d8577074626fa","reportUrl":"https://novasamatech.github.io/test-runner/5950//#testresult/5f3d8577074626fa","status":"passed","time":{"start":1736586382036,"stop":1736586382353,"duration":317}},{"uid":"df0c85d3d717a7fe","reportUrl":"https://novasamatech.github.io/test-runner/5949//#testresult/df0c85d3d717a7fe","status":"passed","time":{"start":1736521594188,"stop":1736521594460,"duration":272}},{"uid":"37eb376ee30b9bbe","reportUrl":"https://novasamatech.github.io/test-runner/5948//#testresult/37eb376ee30b9bbe","status":"passed","time":{"start":1736500052594,"stop":1736500052884,"duration":290}},{"uid":"529f99746b7aeda8","reportUrl":"https://novasamatech.github.io/test-runner/5947//#testresult/529f99746b7aeda8","status":"passed","time":{"start":1736435186782,"stop":1736435187068,"duration":286}},{"uid":"63c7a24217a49b30","reportUrl":"https://novasamatech.github.io/test-runner/5946//#testresult/63c7a24217a49b30","status":"passed","time":{"start":1736414813253,"stop":1736414813548,"duration":295}},{"uid":"404037df8e002f85","reportUrl":"https://novasamatech.github.io/test-runner/5945//#testresult/404037df8e002f85","status":"passed","time":{"start":1736413615928,"stop":1736413616248,"duration":320}}]},"tags":[]},"source":"53c4665866d5d7d5.json","parameterValues":["{'url': 'wss://westend.public.curie.radiumblock.co/ws', 'name': 'Westend (TESTNET)'}"]}