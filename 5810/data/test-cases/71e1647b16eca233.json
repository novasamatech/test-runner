{"uid":"71e1647b16eca233","name":"test_subquery_is_synced","fullName":"tests.test_subquery_is_synced#test_subquery_is_synced","historyId":"ced2e2e75e4dd03f949785f72e3ebeed","time":{"start":1730711183548,"stop":1730711199114,"duration":15566},"status":"broken","statusMessage":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","statusTrace":"self = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f5022024c70>\nmethod = 'POST', url = '/sq/nova-wallet/nova-wallet-equilibrium'\nbody = '{\"query\":\"query{\\\\n  _metadata{\\\\n    chain\\\\n    lastProcessedHeight\\\\n    targetHeight\\\\n  }\\\\n}\",\"variables\":{}}'\nheaders = {'User-Agent': 'okhttp/4.11.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'Keep-Alive', 'Host': 'gateway.subquery.network', 'Content-Type': 'application/json; charset=UTF-8', 'Content-Length': '109'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\nredirect = False, assert_same_host = False\ntimeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\nrelease_conn = False, chunked = False, body_pos = None, preload_content = False\ndecode_content = False, response_kw = {}\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/sq/nova-wallet/nova-wallet-equilibrium', query=None, fragment=None)\ndestination_scheme = None, conn = None, release_this_conn = True\nhttp_tunnel_required = False, err = None, clean_exit = False\n\n    def urlopen(  # type: ignore[override]\n        self,\n        method: str,\n        url: str,\n        body: _TYPE_BODY | None = None,\n        headers: typing.Mapping[str, str] | None = None,\n        retries: Retry | bool | int | None = None,\n        redirect: bool = True,\n        assert_same_host: bool = True,\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n        pool_timeout: int | None = None,\n        release_conn: bool | None = None,\n        chunked: bool = False,\n        body_pos: _TYPE_BODY_POSITION | None = None,\n        preload_content: bool = True,\n        decode_content: bool = True,\n        **response_kw: typing.Any,\n    ) -> BaseHTTPResponse:\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method\n           such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When ``False``, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param bool preload_content:\n            If True, the response's body will be preloaded into memory.\n    \n        :param bool decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of ``preload_content``\n            which defaults to ``True``.\n    \n        :param bool chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n        \"\"\"\n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n    \n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = preload_content\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = to_str(_encode_target(url))\n        else:\n            url = to_str(parsed_url.url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n    \n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else's copy.\n        if not http_tunnel_required:\n            headers = headers.copy()  # type: ignore[attr-defined]\n            headers.update(self.proxy_headers)  # type: ignore[union-attr]\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n    \n            # Is this a closed/new connection that requires CONNECT tunnelling?\n            if self.proxy is not None and http_tunnel_required and conn.is_closed:\n                try:\n                    self._prepare_proxy(conn)\n                except (BaseSSLError, OSError, SocketTimeout) as e:\n                    self._raise_timeout(\n                        err=e, url=self.proxy.url, timeout_value=conn.timeout\n                    )\n                    raise\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Make the request on the HTTPConnection object\n>           response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n                retries=retries,\n                response_conn=response_conn,\n                preload_content=preload_content,\n                decode_content=decode_content,\n                **response_kw,\n            )\n\n.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:790: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f5022024c70>\nconn = <urllib3.connection.HTTPSConnection object at 0x7f5022024dc0>\nmethod = 'POST', url = '/sq/nova-wallet/nova-wallet-equilibrium'\nbody = '{\"query\":\"query{\\\\n  _metadata{\\\\n    chain\\\\n    lastProcessedHeight\\\\n    targetHeight\\\\n  }\\\\n}\",\"variables\":{}}'\nheaders = {'User-Agent': 'okhttp/4.11.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'Keep-Alive', 'Host': 'gateway.subquery.network', 'Content-Type': 'application/json; charset=UTF-8', 'Content-Length': '109'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\ntimeout = Timeout(connect=None, read=None, total=None), chunked = False\nresponse_conn = <urllib3.connection.HTTPSConnection object at 0x7f5022024dc0>\npreload_content = False, decode_content = False, enforce_content_length = True\n\n    def _make_request(\n        self,\n        conn: BaseHTTPConnection,\n        method: str,\n        url: str,\n        body: _TYPE_BODY | None = None,\n        headers: typing.Mapping[str, str] | None = None,\n        retries: Retry | None = None,\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n        chunked: bool = False,\n        response_conn: BaseHTTPConnection | None = None,\n        preload_content: bool = True,\n        decode_content: bool = True,\n        enforce_content_length: bool = True,\n    ) -> BaseHTTPResponse:\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param response_conn:\n            Set this to ``None`` if you will handle releasing the connection or\n            set the connection to have the response release it.\n    \n        :param preload_content:\n          If True, the response's body will be preloaded during construction.\n    \n        :param decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n    \n        :param enforce_content_length:\n            Enforce content length checking. Body returned by server must match\n            value of Content-Length header, if present. Otherwise, raise error.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n    \n        try:\n            # Trigger any extra validation we need to do.\n            try:\n                self._validate_conn(conn)\n            except (SocketTimeout, BaseSSLError) as e:\n                self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n                raise\n    \n        # _validate_conn() starts the connection to an HTTPS proxy\n        # so we need to wrap errors with 'ProxyError' here too.\n        except (\n            OSError,\n            NewConnectionError,\n            TimeoutError,\n            BaseSSLError,\n            CertificateError,\n            SSLError,\n        ) as e:\n            new_e: Exception = e\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                new_e = SSLError(e)\n            # If the connection didn't successfully connect to it's proxy\n            # then there\n            if isinstance(\n                new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n            ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n                new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n>           raise new_e\n\n.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:491: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f5022024c70>\nconn = <urllib3.connection.HTTPSConnection object at 0x7f5022024dc0>\nmethod = 'POST', url = '/sq/nova-wallet/nova-wallet-equilibrium'\nbody = '{\"query\":\"query{\\\\n  _metadata{\\\\n    chain\\\\n    lastProcessedHeight\\\\n    targetHeight\\\\n  }\\\\n}\",\"variables\":{}}'\nheaders = {'User-Agent': 'okhttp/4.11.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'Keep-Alive', 'Host': 'gateway.subquery.network', 'Content-Type': 'application/json; charset=UTF-8', 'Content-Length': '109'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\ntimeout = Timeout(connect=None, read=None, total=None), chunked = False\nresponse_conn = <urllib3.connection.HTTPSConnection object at 0x7f5022024dc0>\npreload_content = False, decode_content = False, enforce_content_length = True\n\n    def _make_request(\n        self,\n        conn: BaseHTTPConnection,\n        method: str,\n        url: str,\n        body: _TYPE_BODY | None = None,\n        headers: typing.Mapping[str, str] | None = None,\n        retries: Retry | None = None,\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n        chunked: bool = False,\n        response_conn: BaseHTTPConnection | None = None,\n        preload_content: bool = True,\n        decode_content: bool = True,\n        enforce_content_length: bool = True,\n    ) -> BaseHTTPResponse:\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param response_conn:\n            Set this to ``None`` if you will handle releasing the connection or\n            set the connection to have the response release it.\n    \n        :param preload_content:\n          If True, the response's body will be preloaded during construction.\n    \n        :param decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n    \n        :param enforce_content_length:\n            Enforce content length checking. Body returned by server must match\n            value of Content-Length header, if present. Otherwise, raise error.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n    \n        try:\n            # Trigger any extra validation we need to do.\n            try:\n>               self._validate_conn(conn)\n\n.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:467: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f5022024c70>\nconn = <urllib3.connection.HTTPSConnection object at 0x7f5022024dc0>\n\n    def _validate_conn(self, conn: BaseHTTPConnection) -> None:\n        \"\"\"\n        Called right before a request is made, after the socket is created.\n        \"\"\"\n        super()._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if conn.is_closed:\n>           conn.connect()\n\n.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:1096: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPSConnection object at 0x7f5022024dc0>\n\n    def connect(self) -> None:\n        sock: socket.socket | ssl.SSLSocket\n        self.sock = sock = self._new_conn()\n        server_hostname: str = self.host\n        tls_in_tls = False\n    \n        # Do we need to establish a tunnel?\n        if self._tunnel_host is not None:\n            # We're tunneling to an HTTPS origin so need to do TLS-in-TLS.\n            if self._tunnel_scheme == \"https\":\n                self.sock = sock = self._connect_tls_proxy(self.host, sock)\n                tls_in_tls = True\n    \n            # If we're tunneling it means we're connected to our proxy.\n            self._has_connected_to_proxy = True\n    \n            self._tunnel()  # type: ignore[attr-defined]\n            # Override the host with the one we're requesting data from.\n            server_hostname = self._tunnel_host\n    \n        if self.server_hostname is not None:\n            server_hostname = self.server_hostname\n    \n        is_time_off = datetime.date.today() < RECENT_DATE\n        if is_time_off:\n            warnings.warn(\n                (\n                    f\"System time is way off (before {RECENT_DATE}). This will probably \"\n                    \"lead to SSL verification errors\"\n                ),\n                SystemTimeWarning,\n            )\n    \n>       sock_and_verified = _ssl_wrap_socket_and_match_hostname(\n            sock=sock,\n            cert_reqs=self.cert_reqs,\n            ssl_version=self.ssl_version,\n            ssl_minimum_version=self.ssl_minimum_version,\n            ssl_maximum_version=self.ssl_maximum_version,\n            ca_certs=self.ca_certs,\n            ca_cert_dir=self.ca_cert_dir,\n            ca_cert_data=self.ca_cert_data,\n            cert_file=self.cert_file,\n            key_file=self.key_file,\n            key_password=self.key_password,\n            server_hostname=server_hostname,\n            ssl_context=self.ssl_context,\n            tls_in_tls=tls_in_tls,\n            assert_hostname=self.assert_hostname,\n            assert_fingerprint=self.assert_fingerprint,\n        )\n\n.venv/lib/python3.10/site-packages/urllib3/connection.py:642: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n\n    def _ssl_wrap_socket_and_match_hostname(\n        sock: socket.socket,\n        *,\n        cert_reqs: None | str | int,\n        ssl_version: None | str | int,\n        ssl_minimum_version: int | None,\n        ssl_maximum_version: int | None,\n        cert_file: str | None,\n        key_file: str | None,\n        key_password: str | None,\n        ca_certs: str | None,\n        ca_cert_dir: str | None,\n        ca_cert_data: None | str | bytes,\n        assert_hostname: None | str | Literal[False],\n        assert_fingerprint: str | None,\n        server_hostname: str | None,\n        ssl_context: ssl.SSLContext | None,\n        tls_in_tls: bool = False,\n    ) -> _WrappedAndVerifiedSocket:\n        \"\"\"Logic for constructing an SSLContext from all TLS parameters, passing\n        that down into ssl_wrap_socket, and then doing certificate verification\n        either via hostname or fingerprint. This function exists to guarantee\n        that both proxies and targets have the same behavior when connecting via TLS.\n        \"\"\"\n        default_ssl_context = False\n        if ssl_context is None:\n            default_ssl_context = True\n            context = create_urllib3_context(\n                ssl_version=resolve_ssl_version(ssl_version),\n                ssl_minimum_version=ssl_minimum_version,\n                ssl_maximum_version=ssl_maximum_version,\n                cert_reqs=resolve_cert_reqs(cert_reqs),\n            )\n        else:\n            context = ssl_context\n    \n        context.verify_mode = resolve_cert_reqs(cert_reqs)\n    \n        # In some cases, we want to verify hostnames ourselves\n        if (\n            # `ssl` can't verify fingerprints or alternate hostnames\n            assert_fingerprint\n            or assert_hostname\n            # assert_hostname can be set to False to disable hostname checking\n            or assert_hostname is False\n            # We still support OpenSSL 1.0.2, which prevents us from verifying\n            # hostnames easily: https://github.com/pyca/pyopenssl/pull/933\n            or ssl_.IS_PYOPENSSL\n            or not ssl_.HAS_NEVER_CHECK_COMMON_NAME\n        ):\n            context.check_hostname = False\n    \n        # Try to load OS default certs if none are given. We need to do the hasattr() check\n        # for custom pyOpenSSL SSLContext objects because they don't support\n        # load_default_certs().\n        if (\n            not ca_certs\n            and not ca_cert_dir\n            and not ca_cert_data\n            and default_ssl_context\n            and hasattr(context, \"load_default_certs\")\n        ):\n            context.load_default_certs()\n    \n        # Ensure that IPv6 addresses are in the proper format and don't have a\n        # scope ID. Python's SSL module fails to recognize scoped IPv6 addresses\n        # and interprets them as DNS hostnames.\n        if server_hostname is not None:\n            normalized = server_hostname.strip(\"[]\")\n            if \"%\" in normalized:\n                normalized = normalized[: normalized.rfind(\"%\")]\n            if is_ipaddress(normalized):\n                server_hostname = normalized\n    \n>       ssl_sock = ssl_wrap_socket(\n            sock=sock,\n            keyfile=key_file,\n            certfile=cert_file,\n            key_password=key_password,\n            ca_certs=ca_certs,\n            ca_cert_dir=ca_cert_dir,\n            ca_cert_data=ca_cert_data,\n            server_hostname=server_hostname,\n            ssl_context=context,\n            tls_in_tls=tls_in_tls,\n        )\n\n.venv/lib/python3.10/site-packages/urllib3/connection.py:782: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nkeyfile = None, certfile = None, cert_reqs = None\nca_certs = '/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/certifi/cacert.pem'\nserver_hostname = 'api.subquery.network', ssl_version = None, ciphers = None\nssl_context = <ssl.SSLContext object at 0x7f5021fe5c40>, ca_cert_dir = None\nkey_password = None, ca_cert_data = None, tls_in_tls = False\n\n    def ssl_wrap_socket(\n        sock: socket.socket,\n        keyfile: str | None = None,\n        certfile: str | None = None,\n        cert_reqs: int | None = None,\n        ca_certs: str | None = None,\n        server_hostname: str | None = None,\n        ssl_version: int | None = None,\n        ciphers: str | None = None,\n        ssl_context: ssl.SSLContext | None = None,\n        ca_cert_dir: str | None = None,\n        key_password: str | None = None,\n        ca_cert_data: None | str | bytes = None,\n        tls_in_tls: bool = False,\n    ) -> ssl.SSLSocket | SSLTransportType:\n        \"\"\"\n        All arguments except for server_hostname, ssl_context, tls_in_tls, ca_cert_data and\n        ca_cert_dir have the same meaning as they do when using\n        :func:`ssl.create_default_context`, :meth:`ssl.SSLContext.load_cert_chain`,\n        :meth:`ssl.SSLContext.set_ciphers` and :meth:`ssl.SSLContext.wrap_socket`.\n    \n        :param server_hostname:\n            When SNI is supported, the expected hostname of the certificate\n        :param ssl_context:\n            A pre-made :class:`SSLContext` object. If none is provided, one will\n            be created using :func:`create_urllib3_context`.\n        :param ciphers:\n            A string of ciphers we wish the client to support.\n        :param ca_cert_dir:\n            A directory containing CA certificates in multiple separate files, as\n            supported by OpenSSL's -CApath flag or the capath argument to\n            SSLContext.load_verify_locations().\n        :param key_password:\n            Optional password if the keyfile is encrypted.\n        :param ca_cert_data:\n            Optional string containing CA certificates in PEM format suitable for\n            passing as the cadata parameter to SSLContext.load_verify_locations()\n        :param tls_in_tls:\n            Use SSLTransport to wrap the existing socket.\n        \"\"\"\n        context = ssl_context\n        if context is None:\n            # Note: This branch of code and all the variables in it are only used in tests.\n            # We should consider deprecating and removing this code.\n            context = create_urllib3_context(ssl_version, cert_reqs, ciphers=ciphers)\n    \n        if ca_certs or ca_cert_dir or ca_cert_data:\n            try:\n                context.load_verify_locations(ca_certs, ca_cert_dir, ca_cert_data)\n            except OSError as e:\n                raise SSLError(e) from e\n    \n        elif ssl_context is None and hasattr(context, \"load_default_certs\"):\n            # try to load OS default certs; works well on Windows.\n            context.load_default_certs()\n    \n        # Attempt to detect if we get the goofy behavior of the\n        # keyfile being encrypted and OpenSSL asking for the\n        # passphrase via the terminal and instead error out.\n        if keyfile and key_password is None and _is_key_file_encrypted(keyfile):\n            raise SSLError(\"Client private key is encrypted, password is required\")\n    \n        if certfile:\n            if key_password is None:\n                context.load_cert_chain(certfile, keyfile)\n            else:\n                context.load_cert_chain(certfile, keyfile, key_password)\n    \n        try:\n            context.set_alpn_protocols(ALPN_PROTOCOLS)\n        except NotImplementedError:  # Defensive: in CI, we always have set_alpn_protocols\n            pass\n    \n>       ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)\n\n.venv/lib/python3.10/site-packages/urllib3/util/ssl_.py:470: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nssl_context = <ssl.SSLContext object at 0x7f5021fe5c40>, tls_in_tls = False\nserver_hostname = 'api.subquery.network'\n\n    def _ssl_wrap_socket_impl(\n        sock: socket.socket,\n        ssl_context: ssl.SSLContext,\n        tls_in_tls: bool,\n        server_hostname: str | None = None,\n    ) -> ssl.SSLSocket | SSLTransportType:\n        if tls_in_tls:\n            if not SSLTransport:\n                # Import error, ssl is not available.\n                raise ProxySchemeUnsupported(\n                    \"TLS in TLS requires support for the 'ssl' module\"\n                )\n    \n            SSLTransport._validate_ssl_context_for_tls_in_tls(ssl_context)\n            return SSLTransport(sock, ssl_context, server_hostname)\n    \n>       return ssl_context.wrap_socket(sock, server_hostname=server_hostname)\n\n.venv/lib/python3.10/site-packages/urllib3/util/ssl_.py:514: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLContext object at 0x7f5021fe5c40>\nsock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nserver_side = False, do_handshake_on_connect = True, suppress_ragged_eofs = True\nserver_hostname = 'api.subquery.network', session = None\n\n    def wrap_socket(self, sock, server_side=False,\n                    do_handshake_on_connect=True,\n                    suppress_ragged_eofs=True,\n                    server_hostname=None, session=None):\n        # SSLSocket class handles server_hostname encoding before it calls\n        # ctx._wrap_socket()\n>       return self.sslsocket_class._create(\n            sock=sock,\n            server_side=server_side,\n            do_handshake_on_connect=do_handshake_on_connect,\n            suppress_ragged_eofs=suppress_ragged_eofs,\n            server_hostname=server_hostname,\n            context=self,\n            session=session\n        )\n\n/usr/lib/python3.10/ssl.py:513: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'ssl.SSLSocket'>\nsock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nserver_side = False, do_handshake_on_connect = True, suppress_ragged_eofs = True\nserver_hostname = 'api.subquery.network'\ncontext = <ssl.SSLContext object at 0x7f5021fe5c40>, session = None\n\n    @classmethod\n    def _create(cls, sock, server_side=False, do_handshake_on_connect=True,\n                suppress_ragged_eofs=True, server_hostname=None,\n                context=None, session=None):\n        if sock.getsockopt(SOL_SOCKET, SO_TYPE) != SOCK_STREAM:\n            raise NotImplementedError(\"only stream sockets are supported\")\n        if server_side:\n            if server_hostname:\n                raise ValueError(\"server_hostname can only be specified \"\n                                 \"in client mode\")\n            if session is not None:\n                raise ValueError(\"session can only be specified in \"\n                                 \"client mode\")\n        if context.check_hostname and not server_hostname:\n            raise ValueError(\"check_hostname requires server_hostname\")\n    \n        kwargs = dict(\n            family=sock.family, type=sock.type, proto=sock.proto,\n            fileno=sock.fileno()\n        )\n        self = cls.__new__(cls, **kwargs)\n        super(SSLSocket, self).__init__(**kwargs)\n        sock_timeout = sock.gettimeout()\n        sock.detach()\n    \n        self._context = context\n        self._session = session\n        self._closed = False\n        self._sslobj = None\n        self.server_side = server_side\n        self.server_hostname = context._encode_hostname(server_hostname)\n        self.do_handshake_on_connect = do_handshake_on_connect\n        self.suppress_ragged_eofs = suppress_ragged_eofs\n    \n        # See if we are connected\n        try:\n            self.getpeername()\n        except OSError as e:\n            if e.errno != errno.ENOTCONN:\n                raise\n            connected = False\n            blocking = self.getblocking()\n            self.setblocking(False)\n            try:\n                # We are not connected so this is not supposed to block, but\n                # testing revealed otherwise on macOS and Windows so we do\n                # the non-blocking dance regardless. Our raise when any data\n                # is found means consuming the data is harmless.\n                notconn_pre_handshake_data = self.recv(1)\n            except OSError as e:\n                # EINVAL occurs for recv(1) on non-connected on unix sockets.\n                if e.errno not in (errno.ENOTCONN, errno.EINVAL):\n                    raise\n                notconn_pre_handshake_data = b''\n            self.setblocking(blocking)\n            if notconn_pre_handshake_data:\n                # This prevents pending data sent to the socket before it was\n                # closed from escaping to the caller who could otherwise\n                # presume it came through a successful TLS connection.\n                reason = \"Closed before TLS handshake with data in recv buffer.\"\n                notconn_pre_handshake_data_error = SSLError(e.errno, reason)\n                # Add the SSLError attributes that _ssl.c always adds.\n                notconn_pre_handshake_data_error.reason = reason\n                notconn_pre_handshake_data_error.library = None\n                try:\n                    self.close()\n                except OSError:\n                    pass\n                raise notconn_pre_handshake_data_error\n        else:\n            connected = True\n    \n        self.settimeout(sock_timeout)  # Must come after setblocking() calls.\n        self._connected = connected\n        if connected:\n            # create the SSL object\n            try:\n                self._sslobj = self._context._wrap_socket(\n                    self, server_side, self.server_hostname,\n                    owner=self, session=self._session,\n                )\n                if do_handshake_on_connect:\n                    timeout = self.gettimeout()\n                    if timeout == 0.0:\n                        # non-blocking\n                        raise ValueError(\"do_handshake_on_connect should not be specified for non-blocking sockets\")\n>                   self.do_handshake()\n\n/usr/lib/python3.10/ssl.py:1100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ConnectionResetError: [Errno 104] Connection reset by peer\n\n/usr/lib/python3.10/ssl.py:1371: ConnectionResetError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x7f5022162a40>\nrequest = <PreparedRequest [POST]>, stream = False\ntimeout = Timeout(connect=None, read=None, total=None), verify = True\ncert = None, proxies = OrderedDict()\n\n    def send(\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n    ):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection(request.url, proxies)\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(\n            request,\n            stream=stream,\n            timeout=timeout,\n            verify=verify,\n            cert=cert,\n            proxies=proxies,\n        )\n    \n        chunked = not (request.body is None or \"Content-Length\" in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError:\n                raise ValueError(\n                    f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n                    f\"or a single float to set both timeouts to the same value.\"\n                )\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n>           resp = conn.urlopen(\n                method=request.method,\n                url=url,\n                body=request.body,\n                headers=request.headers,\n                redirect=False,\n                assert_same_host=False,\n                preload_content=False,\n                decode_content=False,\n                retries=self.max_retries,\n                timeout=timeout,\n                chunked=chunked,\n            )\n\n.venv/lib/python3.10/site-packages/requests/adapters.py:486: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f5022024c70>\nmethod = 'POST', url = '/sq/nova-wallet/nova-wallet-equilibrium'\nbody = '{\"query\":\"query{\\\\n  _metadata{\\\\n    chain\\\\n    lastProcessedHeight\\\\n    targetHeight\\\\n  }\\\\n}\",\"variables\":{}}'\nheaders = {'User-Agent': 'okhttp/4.11.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'Keep-Alive', 'Host': 'gateway.subquery.network', 'Content-Type': 'application/json; charset=UTF-8', 'Content-Length': '109'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\nredirect = False, assert_same_host = False\ntimeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\nrelease_conn = False, chunked = False, body_pos = None, preload_content = False\ndecode_content = False, response_kw = {}\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/sq/nova-wallet/nova-wallet-equilibrium', query=None, fragment=None)\ndestination_scheme = None, conn = None, release_this_conn = True\nhttp_tunnel_required = False, err = None, clean_exit = False\n\n    def urlopen(  # type: ignore[override]\n        self,\n        method: str,\n        url: str,\n        body: _TYPE_BODY | None = None,\n        headers: typing.Mapping[str, str] | None = None,\n        retries: Retry | bool | int | None = None,\n        redirect: bool = True,\n        assert_same_host: bool = True,\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n        pool_timeout: int | None = None,\n        release_conn: bool | None = None,\n        chunked: bool = False,\n        body_pos: _TYPE_BODY_POSITION | None = None,\n        preload_content: bool = True,\n        decode_content: bool = True,\n        **response_kw: typing.Any,\n    ) -> BaseHTTPResponse:\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method\n           such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When ``False``, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param bool preload_content:\n            If True, the response's body will be preloaded into memory.\n    \n        :param bool decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of ``preload_content``\n            which defaults to ``True``.\n    \n        :param bool chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n        \"\"\"\n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n    \n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = preload_content\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = to_str(_encode_target(url))\n        else:\n            url = to_str(parsed_url.url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n    \n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else's copy.\n        if not http_tunnel_required:\n            headers = headers.copy()  # type: ignore[attr-defined]\n            headers.update(self.proxy_headers)  # type: ignore[union-attr]\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n    \n            # Is this a closed/new connection that requires CONNECT tunnelling?\n            if self.proxy is not None and http_tunnel_required and conn.is_closed:\n                try:\n                    self._prepare_proxy(conn)\n                except (BaseSSLError, OSError, SocketTimeout) as e:\n                    self._raise_timeout(\n                        err=e, url=self.proxy.url, timeout_value=conn.timeout\n                    )\n                    raise\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Make the request on the HTTPConnection object\n            response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n                retries=retries,\n                response_conn=response_conn,\n                preload_content=preload_content,\n                decode_content=decode_content,\n                **response_kw,\n            )\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except EmptyPoolError:\n            # Didn't get a connection from the pool, no need to clean up\n            clean_exit = True\n            release_this_conn = False\n            raise\n    \n        except (\n            TimeoutError,\n            HTTPException,\n            OSError,\n            ProtocolError,\n            BaseSSLError,\n            SSLError,\n            CertificateError,\n            ProxyError,\n        ) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            new_e: Exception = e\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                new_e = SSLError(e)\n            if isinstance(\n                new_e,\n                (\n                    OSError,\n                    NewConnectionError,\n                    TimeoutError,\n                    SSLError,\n                    HTTPException,\n                ),\n            ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n                new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n            elif isinstance(new_e, (OSError, HTTPException)):\n                new_e = ProtocolError(\"Connection aborted.\", new_e)\n    \n>           retries = retries.increment(\n                method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n            )\n\n.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:844: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None)\nmethod = 'POST', url = '/sq/nova-wallet/nova-wallet-equilibrium'\nresponse = None\nerror = ProtocolError('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f5022024c70>\n_stacktrace = <traceback object at 0x7f5022184200>\n\n    def increment(\n        self,\n        method: str | None = None,\n        url: str | None = None,\n        response: BaseHTTPResponse | None = None,\n        error: Exception | None = None,\n        _pool: ConnectionPool | None = None,\n        _stacktrace: TracebackType | None = None,\n    ) -> Retry:\n        \"\"\"Return a new Retry object with incremented retry counters.\n    \n        :param response: A response object, or None, if the server did not\n            return a response.\n        :type response: :class:`~urllib3.response.BaseHTTPResponse`\n        :param Exception error: An error encountered during the request, or\n            None if the response was received successfully.\n    \n        :return: A new ``Retry`` object.\n        \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        other = self.other\n        cause = \"unknown\"\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or method is None or not self._is_method_retryable(method):\n>               raise reraise(type(error), error, _stacktrace)\n\n.venv/lib/python3.10/site-packages/urllib3/util/retry.py:470: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n\n    def reraise(\n        tp: type[BaseException] | None,\n        value: BaseException,\n        tb: TracebackType | None = None,\n    ) -> typing.NoReturn:\n        try:\n            if value.__traceback__ is not tb:\n>               raise value.with_traceback(tb)\n\n.venv/lib/python3.10/site-packages/urllib3/util/util.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f5022024c70>\nmethod = 'POST', url = '/sq/nova-wallet/nova-wallet-equilibrium'\nbody = '{\"query\":\"query{\\\\n  _metadata{\\\\n    chain\\\\n    lastProcessedHeight\\\\n    targetHeight\\\\n  }\\\\n}\",\"variables\":{}}'\nheaders = {'User-Agent': 'okhttp/4.11.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'Keep-Alive', 'Host': 'gateway.subquery.network', 'Content-Type': 'application/json; charset=UTF-8', 'Content-Length': '109'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\nredirect = False, assert_same_host = False\ntimeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\nrelease_conn = False, chunked = False, body_pos = None, preload_content = False\ndecode_content = False, response_kw = {}\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/sq/nova-wallet/nova-wallet-equilibrium', query=None, fragment=None)\ndestination_scheme = None, conn = None, release_this_conn = True\nhttp_tunnel_required = False, err = None, clean_exit = False\n\n    def urlopen(  # type: ignore[override]\n        self,\n        method: str,\n        url: str,\n        body: _TYPE_BODY | None = None,\n        headers: typing.Mapping[str, str] | None = None,\n        retries: Retry | bool | int | None = None,\n        redirect: bool = True,\n        assert_same_host: bool = True,\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n        pool_timeout: int | None = None,\n        release_conn: bool | None = None,\n        chunked: bool = False,\n        body_pos: _TYPE_BODY_POSITION | None = None,\n        preload_content: bool = True,\n        decode_content: bool = True,\n        **response_kw: typing.Any,\n    ) -> BaseHTTPResponse:\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method\n           such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When ``False``, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param bool preload_content:\n            If True, the response's body will be preloaded into memory.\n    \n        :param bool decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of ``preload_content``\n            which defaults to ``True``.\n    \n        :param bool chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n        \"\"\"\n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n    \n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = preload_content\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = to_str(_encode_target(url))\n        else:\n            url = to_str(parsed_url.url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n    \n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else's copy.\n        if not http_tunnel_required:\n            headers = headers.copy()  # type: ignore[attr-defined]\n            headers.update(self.proxy_headers)  # type: ignore[union-attr]\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n    \n            # Is this a closed/new connection that requires CONNECT tunnelling?\n            if self.proxy is not None and http_tunnel_required and conn.is_closed:\n                try:\n                    self._prepare_proxy(conn)\n                except (BaseSSLError, OSError, SocketTimeout) as e:\n                    self._raise_timeout(\n                        err=e, url=self.proxy.url, timeout_value=conn.timeout\n                    )\n                    raise\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Make the request on the HTTPConnection object\n>           response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n                retries=retries,\n                response_conn=response_conn,\n                preload_content=preload_content,\n                decode_content=decode_content,\n                **response_kw,\n            )\n\n.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:790: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f5022024c70>\nconn = <urllib3.connection.HTTPSConnection object at 0x7f5022024dc0>\nmethod = 'POST', url = '/sq/nova-wallet/nova-wallet-equilibrium'\nbody = '{\"query\":\"query{\\\\n  _metadata{\\\\n    chain\\\\n    lastProcessedHeight\\\\n    targetHeight\\\\n  }\\\\n}\",\"variables\":{}}'\nheaders = {'User-Agent': 'okhttp/4.11.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'Keep-Alive', 'Host': 'gateway.subquery.network', 'Content-Type': 'application/json; charset=UTF-8', 'Content-Length': '109'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\ntimeout = Timeout(connect=None, read=None, total=None), chunked = False\nresponse_conn = <urllib3.connection.HTTPSConnection object at 0x7f5022024dc0>\npreload_content = False, decode_content = False, enforce_content_length = True\n\n    def _make_request(\n        self,\n        conn: BaseHTTPConnection,\n        method: str,\n        url: str,\n        body: _TYPE_BODY | None = None,\n        headers: typing.Mapping[str, str] | None = None,\n        retries: Retry | None = None,\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n        chunked: bool = False,\n        response_conn: BaseHTTPConnection | None = None,\n        preload_content: bool = True,\n        decode_content: bool = True,\n        enforce_content_length: bool = True,\n    ) -> BaseHTTPResponse:\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param response_conn:\n            Set this to ``None`` if you will handle releasing the connection or\n            set the connection to have the response release it.\n    \n        :param preload_content:\n          If True, the response's body will be preloaded during construction.\n    \n        :param decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n    \n        :param enforce_content_length:\n            Enforce content length checking. Body returned by server must match\n            value of Content-Length header, if present. Otherwise, raise error.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n    \n        try:\n            # Trigger any extra validation we need to do.\n            try:\n                self._validate_conn(conn)\n            except (SocketTimeout, BaseSSLError) as e:\n                self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n                raise\n    \n        # _validate_conn() starts the connection to an HTTPS proxy\n        # so we need to wrap errors with 'ProxyError' here too.\n        except (\n            OSError,\n            NewConnectionError,\n            TimeoutError,\n            BaseSSLError,\n            CertificateError,\n            SSLError,\n        ) as e:\n            new_e: Exception = e\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                new_e = SSLError(e)\n            # If the connection didn't successfully connect to it's proxy\n            # then there\n            if isinstance(\n                new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n            ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n                new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n>           raise new_e\n\n.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:491: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f5022024c70>\nconn = <urllib3.connection.HTTPSConnection object at 0x7f5022024dc0>\nmethod = 'POST', url = '/sq/nova-wallet/nova-wallet-equilibrium'\nbody = '{\"query\":\"query{\\\\n  _metadata{\\\\n    chain\\\\n    lastProcessedHeight\\\\n    targetHeight\\\\n  }\\\\n}\",\"variables\":{}}'\nheaders = {'User-Agent': 'okhttp/4.11.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'Keep-Alive', 'Host': 'gateway.subquery.network', 'Content-Type': 'application/json; charset=UTF-8', 'Content-Length': '109'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\ntimeout = Timeout(connect=None, read=None, total=None), chunked = False\nresponse_conn = <urllib3.connection.HTTPSConnection object at 0x7f5022024dc0>\npreload_content = False, decode_content = False, enforce_content_length = True\n\n    def _make_request(\n        self,\n        conn: BaseHTTPConnection,\n        method: str,\n        url: str,\n        body: _TYPE_BODY | None = None,\n        headers: typing.Mapping[str, str] | None = None,\n        retries: Retry | None = None,\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n        chunked: bool = False,\n        response_conn: BaseHTTPConnection | None = None,\n        preload_content: bool = True,\n        decode_content: bool = True,\n        enforce_content_length: bool = True,\n    ) -> BaseHTTPResponse:\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param response_conn:\n            Set this to ``None`` if you will handle releasing the connection or\n            set the connection to have the response release it.\n    \n        :param preload_content:\n          If True, the response's body will be preloaded during construction.\n    \n        :param decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n    \n        :param enforce_content_length:\n            Enforce content length checking. Body returned by server must match\n            value of Content-Length header, if present. Otherwise, raise error.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n    \n        try:\n            # Trigger any extra validation we need to do.\n            try:\n>               self._validate_conn(conn)\n\n.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:467: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f5022024c70>\nconn = <urllib3.connection.HTTPSConnection object at 0x7f5022024dc0>\n\n    def _validate_conn(self, conn: BaseHTTPConnection) -> None:\n        \"\"\"\n        Called right before a request is made, after the socket is created.\n        \"\"\"\n        super()._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if conn.is_closed:\n>           conn.connect()\n\n.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:1096: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPSConnection object at 0x7f5022024dc0>\n\n    def connect(self) -> None:\n        sock: socket.socket | ssl.SSLSocket\n        self.sock = sock = self._new_conn()\n        server_hostname: str = self.host\n        tls_in_tls = False\n    \n        # Do we need to establish a tunnel?\n        if self._tunnel_host is not None:\n            # We're tunneling to an HTTPS origin so need to do TLS-in-TLS.\n            if self._tunnel_scheme == \"https\":\n                self.sock = sock = self._connect_tls_proxy(self.host, sock)\n                tls_in_tls = True\n    \n            # If we're tunneling it means we're connected to our proxy.\n            self._has_connected_to_proxy = True\n    \n            self._tunnel()  # type: ignore[attr-defined]\n            # Override the host with the one we're requesting data from.\n            server_hostname = self._tunnel_host\n    \n        if self.server_hostname is not None:\n            server_hostname = self.server_hostname\n    \n        is_time_off = datetime.date.today() < RECENT_DATE\n        if is_time_off:\n            warnings.warn(\n                (\n                    f\"System time is way off (before {RECENT_DATE}). This will probably \"\n                    \"lead to SSL verification errors\"\n                ),\n                SystemTimeWarning,\n            )\n    \n>       sock_and_verified = _ssl_wrap_socket_and_match_hostname(\n            sock=sock,\n            cert_reqs=self.cert_reqs,\n            ssl_version=self.ssl_version,\n            ssl_minimum_version=self.ssl_minimum_version,\n            ssl_maximum_version=self.ssl_maximum_version,\n            ca_certs=self.ca_certs,\n            ca_cert_dir=self.ca_cert_dir,\n            ca_cert_data=self.ca_cert_data,\n            cert_file=self.cert_file,\n            key_file=self.key_file,\n            key_password=self.key_password,\n            server_hostname=server_hostname,\n            ssl_context=self.ssl_context,\n            tls_in_tls=tls_in_tls,\n            assert_hostname=self.assert_hostname,\n            assert_fingerprint=self.assert_fingerprint,\n        )\n\n.venv/lib/python3.10/site-packages/urllib3/connection.py:642: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n\n    def _ssl_wrap_socket_and_match_hostname(\n        sock: socket.socket,\n        *,\n        cert_reqs: None | str | int,\n        ssl_version: None | str | int,\n        ssl_minimum_version: int | None,\n        ssl_maximum_version: int | None,\n        cert_file: str | None,\n        key_file: str | None,\n        key_password: str | None,\n        ca_certs: str | None,\n        ca_cert_dir: str | None,\n        ca_cert_data: None | str | bytes,\n        assert_hostname: None | str | Literal[False],\n        assert_fingerprint: str | None,\n        server_hostname: str | None,\n        ssl_context: ssl.SSLContext | None,\n        tls_in_tls: bool = False,\n    ) -> _WrappedAndVerifiedSocket:\n        \"\"\"Logic for constructing an SSLContext from all TLS parameters, passing\n        that down into ssl_wrap_socket, and then doing certificate verification\n        either via hostname or fingerprint. This function exists to guarantee\n        that both proxies and targets have the same behavior when connecting via TLS.\n        \"\"\"\n        default_ssl_context = False\n        if ssl_context is None:\n            default_ssl_context = True\n            context = create_urllib3_context(\n                ssl_version=resolve_ssl_version(ssl_version),\n                ssl_minimum_version=ssl_minimum_version,\n                ssl_maximum_version=ssl_maximum_version,\n                cert_reqs=resolve_cert_reqs(cert_reqs),\n            )\n        else:\n            context = ssl_context\n    \n        context.verify_mode = resolve_cert_reqs(cert_reqs)\n    \n        # In some cases, we want to verify hostnames ourselves\n        if (\n            # `ssl` can't verify fingerprints or alternate hostnames\n            assert_fingerprint\n            or assert_hostname\n            # assert_hostname can be set to False to disable hostname checking\n            or assert_hostname is False\n            # We still support OpenSSL 1.0.2, which prevents us from verifying\n            # hostnames easily: https://github.com/pyca/pyopenssl/pull/933\n            or ssl_.IS_PYOPENSSL\n            or not ssl_.HAS_NEVER_CHECK_COMMON_NAME\n        ):\n            context.check_hostname = False\n    \n        # Try to load OS default certs if none are given. We need to do the hasattr() check\n        # for custom pyOpenSSL SSLContext objects because they don't support\n        # load_default_certs().\n        if (\n            not ca_certs\n            and not ca_cert_dir\n            and not ca_cert_data\n            and default_ssl_context\n            and hasattr(context, \"load_default_certs\")\n        ):\n            context.load_default_certs()\n    \n        # Ensure that IPv6 addresses are in the proper format and don't have a\n        # scope ID. Python's SSL module fails to recognize scoped IPv6 addresses\n        # and interprets them as DNS hostnames.\n        if server_hostname is not None:\n            normalized = server_hostname.strip(\"[]\")\n            if \"%\" in normalized:\n                normalized = normalized[: normalized.rfind(\"%\")]\n            if is_ipaddress(normalized):\n                server_hostname = normalized\n    \n>       ssl_sock = ssl_wrap_socket(\n            sock=sock,\n            keyfile=key_file,\n            certfile=cert_file,\n            key_password=key_password,\n            ca_certs=ca_certs,\n            ca_cert_dir=ca_cert_dir,\n            ca_cert_data=ca_cert_data,\n            server_hostname=server_hostname,\n            ssl_context=context,\n            tls_in_tls=tls_in_tls,\n        )\n\n.venv/lib/python3.10/site-packages/urllib3/connection.py:782: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nkeyfile = None, certfile = None, cert_reqs = None\nca_certs = '/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/certifi/cacert.pem'\nserver_hostname = 'api.subquery.network', ssl_version = None, ciphers = None\nssl_context = <ssl.SSLContext object at 0x7f5021fe5c40>, ca_cert_dir = None\nkey_password = None, ca_cert_data = None, tls_in_tls = False\n\n    def ssl_wrap_socket(\n        sock: socket.socket,\n        keyfile: str | None = None,\n        certfile: str | None = None,\n        cert_reqs: int | None = None,\n        ca_certs: str | None = None,\n        server_hostname: str | None = None,\n        ssl_version: int | None = None,\n        ciphers: str | None = None,\n        ssl_context: ssl.SSLContext | None = None,\n        ca_cert_dir: str | None = None,\n        key_password: str | None = None,\n        ca_cert_data: None | str | bytes = None,\n        tls_in_tls: bool = False,\n    ) -> ssl.SSLSocket | SSLTransportType:\n        \"\"\"\n        All arguments except for server_hostname, ssl_context, tls_in_tls, ca_cert_data and\n        ca_cert_dir have the same meaning as they do when using\n        :func:`ssl.create_default_context`, :meth:`ssl.SSLContext.load_cert_chain`,\n        :meth:`ssl.SSLContext.set_ciphers` and :meth:`ssl.SSLContext.wrap_socket`.\n    \n        :param server_hostname:\n            When SNI is supported, the expected hostname of the certificate\n        :param ssl_context:\n            A pre-made :class:`SSLContext` object. If none is provided, one will\n            be created using :func:`create_urllib3_context`.\n        :param ciphers:\n            A string of ciphers we wish the client to support.\n        :param ca_cert_dir:\n            A directory containing CA certificates in multiple separate files, as\n            supported by OpenSSL's -CApath flag or the capath argument to\n            SSLContext.load_verify_locations().\n        :param key_password:\n            Optional password if the keyfile is encrypted.\n        :param ca_cert_data:\n            Optional string containing CA certificates in PEM format suitable for\n            passing as the cadata parameter to SSLContext.load_verify_locations()\n        :param tls_in_tls:\n            Use SSLTransport to wrap the existing socket.\n        \"\"\"\n        context = ssl_context\n        if context is None:\n            # Note: This branch of code and all the variables in it are only used in tests.\n            # We should consider deprecating and removing this code.\n            context = create_urllib3_context(ssl_version, cert_reqs, ciphers=ciphers)\n    \n        if ca_certs or ca_cert_dir or ca_cert_data:\n            try:\n                context.load_verify_locations(ca_certs, ca_cert_dir, ca_cert_data)\n            except OSError as e:\n                raise SSLError(e) from e\n    \n        elif ssl_context is None and hasattr(context, \"load_default_certs\"):\n            # try to load OS default certs; works well on Windows.\n            context.load_default_certs()\n    \n        # Attempt to detect if we get the goofy behavior of the\n        # keyfile being encrypted and OpenSSL asking for the\n        # passphrase via the terminal and instead error out.\n        if keyfile and key_password is None and _is_key_file_encrypted(keyfile):\n            raise SSLError(\"Client private key is encrypted, password is required\")\n    \n        if certfile:\n            if key_password is None:\n                context.load_cert_chain(certfile, keyfile)\n            else:\n                context.load_cert_chain(certfile, keyfile, key_password)\n    \n        try:\n            context.set_alpn_protocols(ALPN_PROTOCOLS)\n        except NotImplementedError:  # Defensive: in CI, we always have set_alpn_protocols\n            pass\n    \n>       ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)\n\n.venv/lib/python3.10/site-packages/urllib3/util/ssl_.py:470: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nssl_context = <ssl.SSLContext object at 0x7f5021fe5c40>, tls_in_tls = False\nserver_hostname = 'api.subquery.network'\n\n    def _ssl_wrap_socket_impl(\n        sock: socket.socket,\n        ssl_context: ssl.SSLContext,\n        tls_in_tls: bool,\n        server_hostname: str | None = None,\n    ) -> ssl.SSLSocket | SSLTransportType:\n        if tls_in_tls:\n            if not SSLTransport:\n                # Import error, ssl is not available.\n                raise ProxySchemeUnsupported(\n                    \"TLS in TLS requires support for the 'ssl' module\"\n                )\n    \n            SSLTransport._validate_ssl_context_for_tls_in_tls(ssl_context)\n            return SSLTransport(sock, ssl_context, server_hostname)\n    \n>       return ssl_context.wrap_socket(sock, server_hostname=server_hostname)\n\n.venv/lib/python3.10/site-packages/urllib3/util/ssl_.py:514: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLContext object at 0x7f5021fe5c40>\nsock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nserver_side = False, do_handshake_on_connect = True, suppress_ragged_eofs = True\nserver_hostname = 'api.subquery.network', session = None\n\n    def wrap_socket(self, sock, server_side=False,\n                    do_handshake_on_connect=True,\n                    suppress_ragged_eofs=True,\n                    server_hostname=None, session=None):\n        # SSLSocket class handles server_hostname encoding before it calls\n        # ctx._wrap_socket()\n>       return self.sslsocket_class._create(\n            sock=sock,\n            server_side=server_side,\n            do_handshake_on_connect=do_handshake_on_connect,\n            suppress_ragged_eofs=suppress_ragged_eofs,\n            server_hostname=server_hostname,\n            context=self,\n            session=session\n        )\n\n/usr/lib/python3.10/ssl.py:513: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'ssl.SSLSocket'>\nsock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nserver_side = False, do_handshake_on_connect = True, suppress_ragged_eofs = True\nserver_hostname = 'api.subquery.network'\ncontext = <ssl.SSLContext object at 0x7f5021fe5c40>, session = None\n\n    @classmethod\n    def _create(cls, sock, server_side=False, do_handshake_on_connect=True,\n                suppress_ragged_eofs=True, server_hostname=None,\n                context=None, session=None):\n        if sock.getsockopt(SOL_SOCKET, SO_TYPE) != SOCK_STREAM:\n            raise NotImplementedError(\"only stream sockets are supported\")\n        if server_side:\n            if server_hostname:\n                raise ValueError(\"server_hostname can only be specified \"\n                                 \"in client mode\")\n            if session is not None:\n                raise ValueError(\"session can only be specified in \"\n                                 \"client mode\")\n        if context.check_hostname and not server_hostname:\n            raise ValueError(\"check_hostname requires server_hostname\")\n    \n        kwargs = dict(\n            family=sock.family, type=sock.type, proto=sock.proto,\n            fileno=sock.fileno()\n        )\n        self = cls.__new__(cls, **kwargs)\n        super(SSLSocket, self).__init__(**kwargs)\n        sock_timeout = sock.gettimeout()\n        sock.detach()\n    \n        self._context = context\n        self._session = session\n        self._closed = False\n        self._sslobj = None\n        self.server_side = server_side\n        self.server_hostname = context._encode_hostname(server_hostname)\n        self.do_handshake_on_connect = do_handshake_on_connect\n        self.suppress_ragged_eofs = suppress_ragged_eofs\n    \n        # See if we are connected\n        try:\n            self.getpeername()\n        except OSError as e:\n            if e.errno != errno.ENOTCONN:\n                raise\n            connected = False\n            blocking = self.getblocking()\n            self.setblocking(False)\n            try:\n                # We are not connected so this is not supposed to block, but\n                # testing revealed otherwise on macOS and Windows so we do\n                # the non-blocking dance regardless. Our raise when any data\n                # is found means consuming the data is harmless.\n                notconn_pre_handshake_data = self.recv(1)\n            except OSError as e:\n                # EINVAL occurs for recv(1) on non-connected on unix sockets.\n                if e.errno not in (errno.ENOTCONN, errno.EINVAL):\n                    raise\n                notconn_pre_handshake_data = b''\n            self.setblocking(blocking)\n            if notconn_pre_handshake_data:\n                # This prevents pending data sent to the socket before it was\n                # closed from escaping to the caller who could otherwise\n                # presume it came through a successful TLS connection.\n                reason = \"Closed before TLS handshake with data in recv buffer.\"\n                notconn_pre_handshake_data_error = SSLError(e.errno, reason)\n                # Add the SSLError attributes that _ssl.c always adds.\n                notconn_pre_handshake_data_error.reason = reason\n                notconn_pre_handshake_data_error.library = None\n                try:\n                    self.close()\n                except OSError:\n                    pass\n                raise notconn_pre_handshake_data_error\n        else:\n            connected = True\n    \n        self.settimeout(sock_timeout)  # Must come after setblocking() calls.\n        self._connected = connected\n        if connected:\n            # create the SSL object\n            try:\n                self._sslobj = self._context._wrap_socket(\n                    self, server_side, self.server_hostname,\n                    owner=self, session=self._session,\n                )\n                if do_handshake_on_connect:\n                    timeout = self.gettimeout()\n                    if timeout == 0.0:\n                        # non-blocking\n                        raise ValueError(\"do_handshake_on_connect should not be specified for non-blocking sockets\")\n>                   self.do_handshake()\n\n/usr/lib/python3.10/ssl.py:1100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n\n/usr/lib/python3.10/ssl.py:1371: ProtocolError\n\nDuring handling of the above exception, another exception occurred:\n\nsubquery_projects = ['https://api.subquery.network/sq/nova-wallet/nova-wallet-origin-trail', 'https://api.subquery.network/sq/nova-wallet/...rk/sq/nova-wallet/nova-wallet-bifrost-polkadot', 'https://api.subquery.network/sq/nova-wallet/nova-wallet-ternoa', ...]\n\n    def test_subquery_is_synced(subquery_projects):\n        for url in subquery_projects:\n>           response = requests.request(\"POST\", url, headers=headers, data=payload)\n\ntests/test_subquery_is_synced.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/requests/api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\n.venv/lib/python3.10/site-packages/requests/sessions.py:589: in request\n    resp = self.send(prep, **send_kwargs)\n.venv/lib/python3.10/site-packages/requests/sessions.py:703: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x7f5022162a40>\nrequest = <PreparedRequest [POST]>, stream = False\ntimeout = Timeout(connect=None, read=None, total=None), verify = True\ncert = None, proxies = OrderedDict()\n\n    def send(\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n    ):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection(request.url, proxies)\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(\n            request,\n            stream=stream,\n            timeout=timeout,\n            verify=verify,\n            cert=cert,\n            proxies=proxies,\n        )\n    \n        chunked = not (request.body is None or \"Content-Length\" in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError:\n                raise ValueError(\n                    f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n                    f\"or a single float to set both timeouts to the same value.\"\n                )\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            resp = conn.urlopen(\n                method=request.method,\n                url=url,\n                body=request.body,\n                headers=request.headers,\n                redirect=False,\n                assert_same_host=False,\n                preload_content=False,\n                decode_content=False,\n                retries=self.max_retries,\n                timeout=timeout,\n                chunked=chunked,\n            )\n    \n        except (ProtocolError, OSError) as err:\n>           raise ConnectionError(err, request=request)\nE           requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n\n.venv/lib/python3.10/site-packages/requests/adapters.py:501: ConnectionError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"subquery_projects","time":{"start":1730711183546,"stop":1730711183548,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_subquery_is_synced"},{"name":"host","value":"fv-az891-303"},{"name":"thread","value":"2110-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_subquery_is_synced"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b432d3e25ca9872c","status":"failed","statusDetails":"AssertionError: assert 13 < 10\n +  where 13 = abs((8180445 - 8180432))","time":{"start":1730711152612,"stop":1730711178536,"duration":25924}},{"uid":"4cd8776cd67c9807","status":"failed","statusDetails":"AssertionError: assert 12 < 10\n +  where 12 = abs((8180441 - 8180429))","time":{"start":1730711114338,"stop":1730711147523,"duration":33185}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":37,"unknown":0,"total":39},"items":[{"uid":"6711b1d30f33b39b","reportUrl":"https://novasamatech.github.io/test-runner/5809//#testresult/6711b1d30f33b39b","status":"passed","time":{"start":1730646329971,"stop":1730646430686,"duration":100715}},{"uid":"dcc0297114e4cd38","reportUrl":"https://novasamatech.github.io/test-runner/5807//#testresult/dcc0297114e4cd38","status":"passed","time":{"start":1730559912057,"stop":1730560002928,"duration":90871}},{"uid":"fdeffdce2f8248b8","reportUrl":"https://novasamatech.github.io/test-runner/5806//#testresult/fdeffdce2f8248b8","status":"passed","time":{"start":1730538267346,"stop":1730538352026,"duration":84680}},{"uid":"51f942c85c5c5820","reportUrl":"https://novasamatech.github.io/test-runner/5805//#testresult/51f942c85c5c5820","status":"passed","time":{"start":1730473478243,"stop":1730473572843,"duration":94600}},{"uid":"9f620c0bcc62a60b","reportUrl":"https://novasamatech.github.io/test-runner/5804//#testresult/9f620c0bcc62a60b","status":"passed","time":{"start":1730451911759,"stop":1730452002343,"duration":90584}},{"uid":"70a325dc9d4b64bd","reportUrl":"https://novasamatech.github.io/test-runner/5803//#testresult/70a325dc9d4b64bd","status":"passed","time":{"start":1730387077760,"stop":1730387160898,"duration":83138}},{"uid":"bcd96511edd16946","reportUrl":"https://novasamatech.github.io/test-runner/5802//#testresult/bcd96511edd16946","status":"passed","time":{"start":1730365475933,"stop":1730365558691,"duration":82758}},{"uid":"eb77d7623db641d0","reportUrl":"https://novasamatech.github.io/test-runner/5801//#testresult/eb77d7623db641d0","status":"passed","time":{"start":1730300679268,"stop":1730300769738,"duration":90470}},{"uid":"31d79717ff7bd393","reportUrl":"https://novasamatech.github.io/test-runner/5800//#testresult/31d79717ff7bd393","status":"passed","time":{"start":1730279089182,"stop":1730279183586,"duration":94404}},{"uid":"74ad95bc1357309e","reportUrl":"https://novasamatech.github.io/test-runner/5799//#testresult/74ad95bc1357309e","status":"passed","time":{"start":1730214282726,"stop":1730214381048,"duration":98322}},{"uid":"f39729dbbbe3f651","reportUrl":"https://novasamatech.github.io/test-runner/5798//#testresult/f39729dbbbe3f651","status":"passed","time":{"start":1730192694085,"stop":1730192764750,"duration":70665}},{"uid":"6fdb42158016f992","reportUrl":"https://novasamatech.github.io/test-runner/5797//#testresult/6fdb42158016f992","status":"passed","time":{"start":1730127894994,"stop":1730127988934,"duration":93940}},{"uid":"fe1689869e44c3d9","reportUrl":"https://novasamatech.github.io/test-runner/5796//#testresult/fe1689869e44c3d9","status":"passed","time":{"start":1730106307360,"stop":1730106397051,"duration":89691}},{"uid":"3b6fe1cc23ae2f70","reportUrl":"https://novasamatech.github.io/test-runner/5795//#testresult/3b6fe1cc23ae2f70","status":"passed","time":{"start":1730041458052,"stop":1730041532785,"duration":74733}},{"uid":"95eed285d13f82a4","reportUrl":"https://novasamatech.github.io/test-runner/5794//#testresult/95eed285d13f82a4","status":"passed","time":{"start":1730020038312,"stop":1730020110370,"duration":72058}},{"uid":"b02cf31f2a76bfc8","reportUrl":"https://novasamatech.github.io/test-runner/5793//#testresult/b02cf31f2a76bfc8","status":"passed","time":{"start":1729955070965,"stop":1729955158259,"duration":87294}},{"uid":"13b0e0b4fc3bdae","reportUrl":"https://novasamatech.github.io/test-runner/5792//#testresult/13b0e0b4fc3bdae","status":"passed","time":{"start":1729933453718,"stop":1729933536920,"duration":83202}},{"uid":"de59f8c9509f59d9","reportUrl":"https://novasamatech.github.io/test-runner/5791//#testresult/de59f8c9509f59d9","status":"passed","time":{"start":1729868673002,"stop":1729868774335,"duration":101333}},{"uid":"64e56460d445b912","reportUrl":"https://novasamatech.github.io/test-runner/5790//#testresult/64e56460d445b912","status":"passed","time":{"start":1729847094254,"stop":1729847190247,"duration":95993}},{"uid":"ca5ba77f1746cbf7","reportUrl":"https://novasamatech.github.io/test-runner/5789//#testresult/ca5ba77f1746cbf7","status":"passed","time":{"start":1729782278599,"stop":1729782336046,"duration":57447}}]},"tags":[]},"source":"71e1647b16eca233.json","parameterValues":[]}