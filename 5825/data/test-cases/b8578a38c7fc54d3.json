{"uid":"b8578a38c7fc54d3","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://rpc.ankr.com/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"516fb730c8759321b4247b2023dc8930","time":{"start":1731337474120,"stop":1731337474179,"duration":59},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f92831f99c0>\ndata = {'name': 'Ethereum', 'url': 'https://rpc.ankr.com/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f92830cb9a0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f92830cbe50>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az774-325"},{"name":"thread","value":"2069-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"be008b09356d22ad","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1731337469060,"stop":1731337469085,"duration":25}},{"uid":"9f8b4472dac06be8","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, request rate limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1731337463859,"stop":1731337463923,"duration":64}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":2,"skipped":0,"passed":52,"unknown":0,"total":55},"items":[{"uid":"4be3671518c8f1ed","reportUrl":"https://novasamatech.github.io/test-runner/5824//#testresult/4be3671518c8f1ed","status":"passed","time":{"start":1731315895465,"stop":1731315896127,"duration":662}},{"uid":"7ea7c8e2cf12d197","reportUrl":"https://novasamatech.github.io/test-runner/5823//#testresult/7ea7c8e2cf12d197","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1731251070231,"stop":1731251070337,"duration":106}},{"uid":"b511cba1b4317f7e","reportUrl":"https://novasamatech.github.io/test-runner/5822//#testresult/b511cba1b4317f7e","status":"passed","time":{"start":1731229471338,"stop":1731229471571,"duration":233}},{"uid":"cc00f8e3382bc285","reportUrl":"https://novasamatech.github.io/test-runner/5821//#testresult/cc00f8e3382bc285","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, request rate limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1731164679974,"stop":1731164680268,"duration":294}},{"uid":"1d33325850ea680e","reportUrl":"https://novasamatech.github.io/test-runner/5820//#testresult/1d33325850ea680e","status":"passed","time":{"start":1731143058581,"stop":1731143058993,"duration":412}},{"uid":"d09f2c541cf7b5ef","reportUrl":"https://novasamatech.github.io/test-runner/5819//#testresult/d09f2c541cf7b5ef","status":"passed","time":{"start":1731078263453,"stop":1731078264019,"duration":566}},{"uid":"e2731fe242a44c47","reportUrl":"https://novasamatech.github.io/test-runner/5818//#testresult/e2731fe242a44c47","status":"passed","time":{"start":1731056680118,"stop":1731056680338,"duration":220}},{"uid":"7f020eb62ae636ec","reportUrl":"https://novasamatech.github.io/test-runner/5817//#testresult/7f020eb62ae636ec","status":"passed","time":{"start":1730991859090,"stop":1730991859369,"duration":279}},{"uid":"6dec9abd8fce4c24","reportUrl":"https://novasamatech.github.io/test-runner/5816//#testresult/6dec9abd8fce4c24","status":"passed","time":{"start":1730970280926,"stop":1730970281300,"duration":374}},{"uid":"3fc9f0db80414940","reportUrl":"https://novasamatech.github.io/test-runner/5815//#testresult/3fc9f0db80414940","status":"passed","time":{"start":1730905468199,"stop":1730905468648,"duration":449}},{"uid":"23a47f5e8ccd76d9","reportUrl":"https://novasamatech.github.io/test-runner/5814//#testresult/23a47f5e8ccd76d9","status":"passed","time":{"start":1730883888709,"stop":1730883889127,"duration":418}},{"uid":"b33f1ba27ee5718b","reportUrl":"https://novasamatech.github.io/test-runner/5813//#testresult/b33f1ba27ee5718b","status":"passed","time":{"start":1730819090693,"stop":1730819091279,"duration":586}},{"uid":"8d8b00ed10432c05","reportUrl":"https://novasamatech.github.io/test-runner/5812//#testresult/8d8b00ed10432c05","status":"passed","time":{"start":1730797482231,"stop":1730797482657,"duration":426}},{"uid":"5b7d7122d3a888fb","reportUrl":"https://novasamatech.github.io/test-runner/5811//#testresult/5b7d7122d3a888fb","status":"passed","time":{"start":1730732686642,"stop":1730732687429,"duration":787}},{"uid":"297f1a539a3d5b58","reportUrl":"https://novasamatech.github.io/test-runner/5810//#testresult/297f1a539a3d5b58","status":"passed","time":{"start":1730711114436,"stop":1730711115140,"duration":704}},{"uid":"ad2f9e4fda3ea236","reportUrl":"https://novasamatech.github.io/test-runner/5809//#testresult/ad2f9e4fda3ea236","status":"passed","time":{"start":1730646262109,"stop":1730646262964,"duration":855}},{"uid":"c42573a475c37722","reportUrl":"https://novasamatech.github.io/test-runner/5808//#testresult/c42573a475c37722","status":"passed","time":{"start":1730624717062,"stop":1730624717824,"duration":762}},{"uid":"bcff53973d35e2a7","reportUrl":"https://novasamatech.github.io/test-runner/5807//#testresult/bcff53973d35e2a7","status":"passed","time":{"start":1730559903572,"stop":1730559904215,"duration":643}},{"uid":"37a1884eb2820673","reportUrl":"https://novasamatech.github.io/test-runner/5806//#testresult/37a1884eb2820673","status":"passed","time":{"start":1730538268260,"stop":1730538268933,"duration":673}},{"uid":"1ea304b8bf01ab51","reportUrl":"https://novasamatech.github.io/test-runner/5805//#testresult/1ea304b8bf01ab51","status":"passed","time":{"start":1730473479972,"stop":1730473480467,"duration":495}}]},"tags":[]},"source":"b8578a38c7fc54d3.json","parameterValues":["{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"]}