{"uid":"37ff37163af3f842","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://rpc.ankr.com/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"516fb730c8759321b4247b2023dc8930","time":{"start":1732547122849,"stop":1732547123314,"duration":465},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f09d2d71d20>\ndata = {'name': 'Ethereum', 'url': 'https://rpc.ankr.com/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f09d0ae3430>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f09d0ae2b60>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az658-710"},{"name":"thread","value":"2202-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1e29d909bde515e3","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1732547117432,"stop":1732547117813,"duration":381}},{"uid":"f1116c282be4291c","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1732547111921,"stop":1732547112313,"duration":392}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":5,"skipped":0,"passed":72,"unknown":0,"total":83},"items":[{"uid":"b9a0c8ebc3947d64","reportUrl":"https://novasamatech.github.io/test-runner/5852//#testresult/b9a0c8ebc3947d64","status":"passed","time":{"start":1732525518572,"stop":1732525518929,"duration":357}},{"uid":"ddb77a5a627d539","reportUrl":"https://novasamatech.github.io/test-runner/5851//#testresult/ddb77a5a627d539","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, fully limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1732460657516,"stop":1732460657579,"duration":63}},{"uid":"e4e1168781c7be18","reportUrl":"https://novasamatech.github.io/test-runner/5850//#testresult/e4e1168781c7be18","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, request rate limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1732439064917,"stop":1732439065174,"duration":257}},{"uid":"cf250b9da1f1ccd2","reportUrl":"https://novasamatech.github.io/test-runner/5849//#testresult/cf250b9da1f1ccd2","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1732374316082,"stop":1732374316584,"duration":502}},{"uid":"c55fd25ef5d935cd","reportUrl":"https://novasamatech.github.io/test-runner/5848//#testresult/c55fd25ef5d935cd","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, request rate limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1732352663287,"stop":1732352663442,"duration":155}},{"uid":"590cb86cbfa5ab4e","reportUrl":"https://novasamatech.github.io/test-runner/5847//#testresult/590cb86cbfa5ab4e","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, request rate limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1732287935654,"stop":1732287935773,"duration":119}},{"uid":"cc01bb10d913978a","reportUrl":"https://novasamatech.github.io/test-runner/5846//#testresult/cc01bb10d913978a","status":"passed","time":{"start":1732266320855,"stop":1732266321642,"duration":787}},{"uid":"545c8741b7f06427","reportUrl":"https://novasamatech.github.io/test-runner/5845//#testresult/545c8741b7f06427","status":"passed","time":{"start":1732201479683,"stop":1732201480341,"duration":658}},{"uid":"591a6847d9f8c3b6","reportUrl":"https://novasamatech.github.io/test-runner/5844//#testresult/591a6847d9f8c3b6","status":"passed","time":{"start":1732179900239,"stop":1732179901302,"duration":1063}},{"uid":"9634c7c2201d2b1d","reportUrl":"https://novasamatech.github.io/test-runner/5843//#testresult/9634c7c2201d2b1d","status":"passed","time":{"start":1732115073111,"stop":1732115073617,"duration":506}},{"uid":"aecc1cc6832e8915","reportUrl":"https://novasamatech.github.io/test-runner/5842//#testresult/aecc1cc6832e8915","status":"passed","time":{"start":1732093500709,"stop":1732093500935,"duration":226}},{"uid":"527f738975c91516","reportUrl":"https://novasamatech.github.io/test-runner/5841//#testresult/527f738975c91516","status":"passed","time":{"start":1732028684577,"stop":1732028685138,"duration":561}},{"uid":"261668f1fc35a25","reportUrl":"https://novasamatech.github.io/test-runner/5840//#testresult/261668f1fc35a25","status":"passed","time":{"start":1732007100184,"stop":1732007100897,"duration":713}},{"uid":"5653540b3b639d83","reportUrl":"https://novasamatech.github.io/test-runner/5839//#testresult/5653540b3b639d83","status":"passed","time":{"start":1731942299066,"stop":1731942299889,"duration":823}},{"uid":"3d6b98c428948739","reportUrl":"https://novasamatech.github.io/test-runner/5838//#testresult/3d6b98c428948739","status":"passed","time":{"start":1731920723393,"stop":1731920724520,"duration":1127}},{"uid":"7721298ff5c9d68","reportUrl":"https://novasamatech.github.io/test-runner/5837//#testresult/7721298ff5c9d68","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, request rate limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1731855863449,"stop":1731855863575,"duration":126}},{"uid":"54b0f49e9f6afcd5","reportUrl":"https://novasamatech.github.io/test-runner/5836//#testresult/54b0f49e9f6afcd5","status":"passed","time":{"start":1731834256799,"stop":1731834257626,"duration":827}},{"uid":"5dc5d8e9174dda99","reportUrl":"https://novasamatech.github.io/test-runner/5835//#testresult/5dc5d8e9174dda99","status":"passed","time":{"start":1731769448276,"stop":1731769448580,"duration":304}},{"uid":"21f70b7562d203b3","reportUrl":"https://novasamatech.github.io/test-runner/5834//#testresult/21f70b7562d203b3","status":"passed","time":{"start":1731747856075,"stop":1731747857640,"duration":1565}},{"uid":"e3880ab877d90df4","reportUrl":"https://novasamatech.github.io/test-runner/5833//#testresult/e3880ab877d90df4","status":"passed","time":{"start":1731683075940,"stop":1731683076507,"duration":567}}]},"tags":[]},"source":"37ff37163af3f842.json","parameterValues":["{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"]}