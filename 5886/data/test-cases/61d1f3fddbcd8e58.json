{"uid":"61d1f3fddbcd8e58","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://rpc.ankr.com/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"516fb730c8759321b4247b2023dc8930","time":{"start":1733994319322,"stop":1733994319522,"duration":200},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f3e27f49d50>\ndata = {'name': 'Ethereum', 'url': 'https://rpc.ankr.com/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f3e27e77d30>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f3e27e773d0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az975-478"},{"name":"thread","value":"2122-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ae4603f740183428","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': 429, 'details': 'You have surpassed your allowed throughput limit. Reduce the amount of requests per second or upgrade for more capacity.', 'event': -33200, 'message': 'Too Many Requests'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1733994314196,"stop":1733994314307,"duration":111}},{"uid":"a743cea59d265aff","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': 429, 'details': 'You have surpassed your allowed throughput limit. Reduce the amount of requests per second or upgrade for more capacity.', 'event': -33200, 'message': 'Too Many Requests'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1733994308796,"stop":1733994309110,"duration":314}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":12,"broken":14,"skipped":0,"passed":90,"unknown":0,"total":116},"items":[{"uid":"bbc8b91dc96ed3de","reportUrl":"https://novasamatech.github.io/test-runner/5885//#testresult/bbc8b91dc96ed3de","status":"passed","time":{"start":1733929504462,"stop":1733929504903,"duration":441}},{"uid":"93e4a7e4180efeb5","reportUrl":"https://novasamatech.github.io/test-runner/5884//#testresult/93e4a7e4180efeb5","status":"passed","time":{"start":1733907907767,"stop":1733907908257,"duration":490}},{"uid":"647a5370778b9dd6","reportUrl":"https://novasamatech.github.io/test-runner/5883//#testresult/647a5370778b9dd6","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': 429, 'details': 'You have surpassed your allowed throughput limit. Reduce the amount of requests per second or upgrade for more capacity.', 'event': -33200, 'message': 'Too Many Requests'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1733843108162,"stop":1733843108205,"duration":43}},{"uid":"b6ff79c88a43700f","reportUrl":"https://novasamatech.github.io/test-runner/5882//#testresult/b6ff79c88a43700f","status":"passed","time":{"start":1733821531008,"stop":1733821531595,"duration":587}},{"uid":"39aabb906f8165eb","reportUrl":"https://novasamatech.github.io/test-runner/5881//#testresult/39aabb906f8165eb","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': 402, 'details': 'You have reached your daily credit limit. To continue making requests, upgrade your plan or purchase additional credits', 'event': -33000, 'message': 'Payment Required'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1733756718974,"stop":1733756719053,"duration":79}},{"uid":"d5da5d3bbe223df7","reportUrl":"https://novasamatech.github.io/test-runner/5880//#testresult/d5da5d3bbe223df7","status":"passed","time":{"start":1733735136774,"stop":1733735137348,"duration":574}},{"uid":"6b7a35fddcac581","reportUrl":"https://novasamatech.github.io/test-runner/5879//#testresult/6b7a35fddcac581","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': 402, 'details': 'You have reached your daily credit limit. To continue making requests, upgrade your plan or purchase additional credits', 'event': -33000, 'message': 'Payment Required'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1733670258160,"stop":1733670258671,"duration":511}},{"uid":"fecadc80e18b6f86","reportUrl":"https://novasamatech.github.io/test-runner/5878//#testresult/fecadc80e18b6f86","status":"passed","time":{"start":1733648665455,"stop":1733648665849,"duration":394}},{"uid":"9997252ccf72589a","reportUrl":"https://novasamatech.github.io/test-runner/5877//#testresult/9997252ccf72589a","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733583865676,"stop":1733583866043,"duration":367}},{"uid":"dff336824f13a390","reportUrl":"https://novasamatech.github.io/test-runner/5876//#testresult/dff336824f13a390","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733562276890,"stop":1733562277298,"duration":408}},{"uid":"97f69761985df192","reportUrl":"https://novasamatech.github.io/test-runner/5875//#testresult/97f69761985df192","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733497506178,"stop":1733497506205,"duration":27}},{"uid":"da4989638479a899","reportUrl":"https://novasamatech.github.io/test-runner/5874//#testresult/da4989638479a899","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': 429, 'details': 'You have surpassed your allowed throughput limit. Reduce the amount of requests per second or upgrade for more capacity.', 'event': -33200, 'message': 'Too Many Requests'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1733475916363,"stop":1733475916397,"duration":34}},{"uid":"a265b6b3f9939872","reportUrl":"https://novasamatech.github.io/test-runner/5873//#testresult/a265b6b3f9939872","status":"passed","time":{"start":1733411094592,"stop":1733411094738,"duration":146}},{"uid":"6756177a5e73f101","reportUrl":"https://novasamatech.github.io/test-runner/5872//#testresult/6756177a5e73f101","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733389536541,"stop":1733389536911,"duration":370}},{"uid":"3981ca3afa34e012","reportUrl":"https://novasamatech.github.io/test-runner/5871//#testresult/3981ca3afa34e012","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733324700148,"stop":1733324700411,"duration":263}},{"uid":"4638c2fd0aa12964","reportUrl":"https://novasamatech.github.io/test-runner/5870//#testresult/4638c2fd0aa12964","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, request rate limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1733303133738,"stop":1733303134093,"duration":355}},{"uid":"f8f26f37628cbe70","reportUrl":"https://novasamatech.github.io/test-runner/5869//#testresult/f8f26f37628cbe70","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733238301457,"stop":1733238301584,"duration":127}},{"uid":"5a83ed64bae97aa","reportUrl":"https://novasamatech.github.io/test-runner/5868//#testresult/5a83ed64bae97aa","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733216717406,"stop":1733216717451,"duration":45}},{"uid":"800bdfbbae5a38d5","reportUrl":"https://novasamatech.github.io/test-runner/5867//#testresult/800bdfbbae5a38d5","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, fully limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1733151919406,"stop":1733151919447,"duration":41}},{"uid":"4cb0221777d9775f","reportUrl":"https://novasamatech.github.io/test-runner/5866//#testresult/4cb0221777d9775f","status":"passed","time":{"start":1733130326952,"stop":1733130327324,"duration":372}}]},"tags":[]},"source":"61d1f3fddbcd8e58.json","parameterValues":["{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"]}