{"uid":"2c506b36f8e66196","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://1rpc.io/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"9e0c16e1a7876bd51b49d655a0298c26","time":{"start":1733303133732,"stop":1733303134082,"duration":350},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7fc974385cc0>\ndata = {'name': 'Ethereum', 'url': 'https://1rpc.io/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7fc97427b8b0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7fc97427b850>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1149-541"},{"name":"thread","value":"2130-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"610608b6c831f9dc","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, request rate limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1733303128333,"stop":1733303128717,"duration":384}},{"uid":"357146fc7242572c","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, request rate limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1733303122644,"stop":1733303123261,"duration":617}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":9,"skipped":0,"passed":84,"unknown":0,"total":100},"items":[{"uid":"da7241b4d7e340f7","reportUrl":"https://novasamatech.github.io/test-runner/5869//#testresult/da7241b4d7e340f7","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733238301459,"stop":1733238301601,"duration":142}},{"uid":"e88f480af7ebd565","reportUrl":"https://novasamatech.github.io/test-runner/5868//#testresult/e88f480af7ebd565","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, fully limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1733216717406,"stop":1733216717460,"duration":54}},{"uid":"80c868cb93962f7","reportUrl":"https://novasamatech.github.io/test-runner/5867//#testresult/80c868cb93962f7","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733151920234,"stop":1733151920291,"duration":57}},{"uid":"e06c752182d5e226","reportUrl":"https://novasamatech.github.io/test-runner/5866//#testresult/e06c752182d5e226","status":"passed","time":{"start":1733130326952,"stop":1733130327824,"duration":872}},{"uid":"ba46315d45b7e489","reportUrl":"https://novasamatech.github.io/test-runner/5865//#testresult/ba46315d45b7e489","status":"passed","time":{"start":1733065458990,"stop":1733065460035,"duration":1045}},{"uid":"3983af7544ccc40f","reportUrl":"https://novasamatech.github.io/test-runner/5864//#testresult/3983af7544ccc40f","status":"passed","time":{"start":1733043869483,"stop":1733043870848,"duration":1365}},{"uid":"6733e0cd36d78e9","reportUrl":"https://novasamatech.github.io/test-runner/5863//#testresult/6733e0cd36d78e9","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, request rate limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1732979067846,"stop":1732979068023,"duration":177}},{"uid":"188c60ae91e8c20a","reportUrl":"https://novasamatech.github.io/test-runner/5862//#testresult/188c60ae91e8c20a","status":"passed","time":{"start":1732957475091,"stop":1732957475773,"duration":682}},{"uid":"a74326f839760af7","reportUrl":"https://novasamatech.github.io/test-runner/5861//#testresult/a74326f839760af7","status":"passed","time":{"start":1732892689626,"stop":1732892691261,"duration":1635}},{"uid":"167777437ac1a93e","reportUrl":"https://novasamatech.github.io/test-runner/5860//#testresult/167777437ac1a93e","status":"passed","time":{"start":1732871107838,"stop":1732871108396,"duration":558}},{"uid":"1dd5dcedf9158790","reportUrl":"https://novasamatech.github.io/test-runner/5859//#testresult/1dd5dcedf9158790","status":"passed","time":{"start":1732806279052,"stop":1732806279752,"duration":700}},{"uid":"96803e15a95a8457","reportUrl":"https://novasamatech.github.io/test-runner/5858//#testresult/96803e15a95a8457","status":"passed","time":{"start":1732784714534,"stop":1732784715492,"duration":958}},{"uid":"dab48d8685caee21","reportUrl":"https://novasamatech.github.io/test-runner/5857//#testresult/dab48d8685caee21","status":"passed","time":{"start":1732719881419,"stop":1732719882215,"duration":796}},{"uid":"b6e40fa26302d167","reportUrl":"https://novasamatech.github.io/test-runner/5856//#testresult/b6e40fa26302d167","status":"passed","time":{"start":1732698315921,"stop":1732698317010,"duration":1089}},{"uid":"378dbd550d3f567b","reportUrl":"https://novasamatech.github.io/test-runner/5855//#testresult/378dbd550d3f567b","status":"passed","time":{"start":1732633483446,"stop":1732633484337,"duration":891}},{"uid":"40d4e9b8136b0854","reportUrl":"https://novasamatech.github.io/test-runner/5854//#testresult/40d4e9b8136b0854","status":"passed","time":{"start":1732611915486,"stop":1732611916815,"duration":1329}},{"uid":"5efb0ea5511f09fb","reportUrl":"https://novasamatech.github.io/test-runner/5853//#testresult/5efb0ea5511f09fb","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, request rate limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1732547122826,"stop":1732547123336,"duration":510}},{"uid":"a61b8862f4dae803","reportUrl":"https://novasamatech.github.io/test-runner/5852//#testresult/a61b8862f4dae803","status":"passed","time":{"start":1732525518572,"stop":1732525519402,"duration":830}},{"uid":"5c7b099f7494c873","reportUrl":"https://novasamatech.github.io/test-runner/5851//#testresult/5c7b099f7494c873","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1732460657543,"stop":1732460657576,"duration":33}},{"uid":"50ca42bc5f25e97f","reportUrl":"https://novasamatech.github.io/test-runner/5850//#testresult/50ca42bc5f25e97f","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, request rate limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1732439064917,"stop":1732439065173,"duration":256}}]},"tags":[]},"source":"2c506b36f8e66196.json","parameterValues":["{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"]}