{"uid":"8b5323afd9b8eafc","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://1rpc.io/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"9e0c16e1a7876bd51b49d655a0298c26","time":{"start":1733843108175,"stop":1733843108209,"duration":34},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f834f7b9b70>\ndata = {'name': 'Ethereum', 'url': 'https://1rpc.io/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f834d52f130>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f834d52d0c0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1433-10"},{"name":"thread","value":"2215-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"211700c6c2160e8e","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733843103102,"stop":1733843103141,"duration":39}},{"uid":"ec2024323e22582d","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733843097420,"stop":1733843097998,"duration":578}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":10,"broken":16,"skipped":0,"passed":87,"unknown":0,"total":113},"items":[{"uid":"25fccc71ddc7f752","reportUrl":"https://novasamatech.github.io/test-runner/5882//#testresult/25fccc71ddc7f752","status":"passed","time":{"start":1733821531005,"stop":1733821532152,"duration":1147}},{"uid":"140911baa33ff211","reportUrl":"https://novasamatech.github.io/test-runner/5881//#testresult/140911baa33ff211","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733756718967,"stop":1733756719142,"duration":175}},{"uid":"ce7fa8865a8318d","reportUrl":"https://novasamatech.github.io/test-runner/5880//#testresult/ce7fa8865a8318d","status":"passed","time":{"start":1733735136774,"stop":1733735137939,"duration":1165}},{"uid":"fb77f98b944372cd","reportUrl":"https://novasamatech.github.io/test-runner/5879//#testresult/fb77f98b944372cd","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': 402, 'details': 'You have reached your daily credit limit. To continue making requests, upgrade your plan or purchase additional credits', 'event': -33000, 'message': 'Payment Required'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1733670258161,"stop":1733670258667,"duration":506}},{"uid":"32f824857e759b71","reportUrl":"https://novasamatech.github.io/test-runner/5878//#testresult/32f824857e759b71","status":"failed","statusDetails":"AssertionError: Failed to connect to Ethereum RPC node\nassert False\n +  where False = <bound method Web3.is_connected of <web3.main.Web3 object at 0x7f4b4c1d8e80>>()\n +    where <bound method Web3.is_connected of <web3.main.Web3 object at 0x7f4b4c1d8e80>> = <web3.main.Web3 object at 0x7f4b4c1d8e80>.is_connected","time":{"start":1733648676434,"stop":1733648676854,"duration":420}},{"uid":"456bc04df283d037","reportUrl":"https://novasamatech.github.io/test-runner/5877//#testresult/456bc04df283d037","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733583865222,"stop":1733583865702,"duration":480}},{"uid":"9160748eb96e3c4e","reportUrl":"https://novasamatech.github.io/test-runner/5876//#testresult/9160748eb96e3c4e","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733562277025,"stop":1733562277681,"duration":656}},{"uid":"befd6923e603b4d3","reportUrl":"https://novasamatech.github.io/test-runner/5875//#testresult/befd6923e603b4d3","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': 402, 'details': 'You have reached your daily credit limit. To continue making requests, upgrade your plan or purchase additional credits', 'event': -33000, 'message': 'Payment Required'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1733497506219,"stop":1733497506290,"duration":71}},{"uid":"d373815aa547e8f8","reportUrl":"https://novasamatech.github.io/test-runner/5874//#testresult/d373815aa547e8f8","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733475916375,"stop":1733475916412,"duration":37}},{"uid":"3c433870d87f2f58","reportUrl":"https://novasamatech.github.io/test-runner/5873//#testresult/3c433870d87f2f58","status":"passed","time":{"start":1733411088823,"stop":1733411089746,"duration":923}},{"uid":"71fb37ef6e969aa6","reportUrl":"https://novasamatech.github.io/test-runner/5872//#testresult/71fb37ef6e969aa6","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733389536556,"stop":1733389537093,"duration":537}},{"uid":"434b5dce3987a9a2","reportUrl":"https://novasamatech.github.io/test-runner/5871//#testresult/434b5dce3987a9a2","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733324700094,"stop":1733324700144,"duration":50}},{"uid":"2c506b36f8e66196","reportUrl":"https://novasamatech.github.io/test-runner/5870//#testresult/2c506b36f8e66196","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733303133732,"stop":1733303134082,"duration":350}},{"uid":"da7241b4d7e340f7","reportUrl":"https://novasamatech.github.io/test-runner/5869//#testresult/da7241b4d7e340f7","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733238301459,"stop":1733238301601,"duration":142}},{"uid":"e88f480af7ebd565","reportUrl":"https://novasamatech.github.io/test-runner/5868//#testresult/e88f480af7ebd565","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, fully limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1733216717406,"stop":1733216717460,"duration":54}},{"uid":"80c868cb93962f7","reportUrl":"https://novasamatech.github.io/test-runner/5867//#testresult/80c868cb93962f7","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1733151920234,"stop":1733151920291,"duration":57}},{"uid":"e06c752182d5e226","reportUrl":"https://novasamatech.github.io/test-runner/5866//#testresult/e06c752182d5e226","status":"passed","time":{"start":1733130326952,"stop":1733130327824,"duration":872}},{"uid":"ba46315d45b7e489","reportUrl":"https://novasamatech.github.io/test-runner/5865//#testresult/ba46315d45b7e489","status":"passed","time":{"start":1733065458990,"stop":1733065460035,"duration":1045}},{"uid":"3983af7544ccc40f","reportUrl":"https://novasamatech.github.io/test-runner/5864//#testresult/3983af7544ccc40f","status":"passed","time":{"start":1733043869483,"stop":1733043870848,"duration":1365}},{"uid":"6733e0cd36d78e9","reportUrl":"https://novasamatech.github.io/test-runner/5863//#testresult/6733e0cd36d78e9","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, request rate limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1732979067846,"stop":1732979068023,"duration":177}}]},"tags":[]},"source":"8b5323afd9b8eafc.json","parameterValues":["{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"]}