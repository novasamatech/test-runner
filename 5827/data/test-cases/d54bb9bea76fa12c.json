{"uid":"d54bb9bea76fa12c","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://1rpc.io/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"9e0c16e1a7876bd51b49d655a0298c26","time":{"start":1731423885625,"stop":1731423885965,"duration":340},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f342b6b9b70>\ndata = {'name': 'Ethereum', 'url': 'https://1rpc.io/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f342b5a8f40>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f342b5a8bb0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az801-325"},{"name":"thread","value":"2092-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5e3c463dd4b19ab9","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, request rate limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1731423880323,"stop":1731423880610,"duration":287}},{"uid":"58b9719e458e605","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, request rate limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1731423874906,"stop":1731423875228,"duration":322}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":2,"skipped":0,"passed":53,"unknown":0,"total":57},"items":[{"uid":"b11559fd30595bc5","reportUrl":"https://novasamatech.github.io/test-runner/5826//#testresult/b11559fd30595bc5","status":"passed","time":{"start":1731402286367,"stop":1731402287027,"duration":660}},{"uid":"3be5068f5512514c","reportUrl":"https://novasamatech.github.io/test-runner/5825//#testresult/3be5068f5512514c","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, request rate limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1731337474113,"stop":1731337474151,"duration":38}},{"uid":"4ef4542b34376bee","reportUrl":"https://novasamatech.github.io/test-runner/5824//#testresult/4ef4542b34376bee","status":"passed","time":{"start":1731315895464,"stop":1731315896293,"duration":829}},{"uid":"ad99590a275f0eca","reportUrl":"https://novasamatech.github.io/test-runner/5823//#testresult/ad99590a275f0eca","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1731251070514,"stop":1731251070629,"duration":115}},{"uid":"a2040e080375d58c","reportUrl":"https://novasamatech.github.io/test-runner/5822//#testresult/a2040e080375d58c","status":"passed","time":{"start":1731229471336,"stop":1731229471903,"duration":567}},{"uid":"f22bcb9867aaf9c3","reportUrl":"https://novasamatech.github.io/test-runner/5821//#testresult/f22bcb9867aaf9c3","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, request rate limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1731164679974,"stop":1731164680264,"duration":290}},{"uid":"df2a1748f3cf7547","reportUrl":"https://novasamatech.github.io/test-runner/5820//#testresult/df2a1748f3cf7547","status":"passed","time":{"start":1731143058581,"stop":1731143059354,"duration":773}},{"uid":"f93bb0d1dc5059f9","reportUrl":"https://novasamatech.github.io/test-runner/5819//#testresult/f93bb0d1dc5059f9","status":"passed","time":{"start":1731078263448,"stop":1731078264452,"duration":1004}},{"uid":"ffccb057c9992e64","reportUrl":"https://novasamatech.github.io/test-runner/5818//#testresult/ffccb057c9992e64","status":"passed","time":{"start":1731056680117,"stop":1731056681303,"duration":1186}},{"uid":"d68db5358376774a","reportUrl":"https://novasamatech.github.io/test-runner/5817//#testresult/d68db5358376774a","status":"passed","time":{"start":1730991859092,"stop":1730991859994,"duration":902}},{"uid":"8facb62f2127559f","reportUrl":"https://novasamatech.github.io/test-runner/5816//#testresult/8facb62f2127559f","status":"passed","time":{"start":1730970280924,"stop":1730970281516,"duration":592}},{"uid":"3d89f148723622f5","reportUrl":"https://novasamatech.github.io/test-runner/5815//#testresult/3d89f148723622f5","status":"passed","time":{"start":1730905468195,"stop":1730905469189,"duration":994}},{"uid":"a78e10ee19a8e9bd","reportUrl":"https://novasamatech.github.io/test-runner/5814//#testresult/a78e10ee19a8e9bd","status":"passed","time":{"start":1730883888709,"stop":1730883889468,"duration":759}},{"uid":"4904d02c781360d5","reportUrl":"https://novasamatech.github.io/test-runner/5813//#testresult/4904d02c781360d5","status":"passed","time":{"start":1730819090691,"stop":1730819091689,"duration":998}},{"uid":"eb3e2500fb7d1e74","reportUrl":"https://novasamatech.github.io/test-runner/5812//#testresult/eb3e2500fb7d1e74","status":"passed","time":{"start":1730797482228,"stop":1730797483132,"duration":904}},{"uid":"11b5138bb9ba60d6","reportUrl":"https://novasamatech.github.io/test-runner/5811//#testresult/11b5138bb9ba60d6","status":"passed","time":{"start":1730732686644,"stop":1730732687716,"duration":1072}},{"uid":"f4a2087e72727670","reportUrl":"https://novasamatech.github.io/test-runner/5810//#testresult/f4a2087e72727670","status":"passed","time":{"start":1730711114436,"stop":1730711115272,"duration":836}},{"uid":"eff6dad0f43ff7f1","reportUrl":"https://novasamatech.github.io/test-runner/5809//#testresult/eff6dad0f43ff7f1","status":"passed","time":{"start":1730646262113,"stop":1730646263537,"duration":1424}},{"uid":"5a23b76faf42af0d","reportUrl":"https://novasamatech.github.io/test-runner/5808//#testresult/5a23b76faf42af0d","status":"passed","time":{"start":1730624717064,"stop":1730624718132,"duration":1068}},{"uid":"62c9be8103636e03","reportUrl":"https://novasamatech.github.io/test-runner/5807//#testresult/62c9be8103636e03","status":"passed","time":{"start":1730559903568,"stop":1730559904560,"duration":992}}]},"tags":[]},"source":"d54bb9bea76fa12c.json","parameterValues":["{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"]}